<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://aem.design/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aem.design/" rel="alternate" type="text/html" /><updated>2021-08-16T13:51:04+10:00</updated><id>https://aem.design/feed.xml</id><title type="html">AEM.Design</title><subtitle>An amazing website.</subtitle><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><entry><title type="html">AEM Akamai Cache flush Agent üòç</title><link href="https://aem.design/blog/2021/04/25/creating-akamai-flush-agent" rel="alternate" type="text/html" title="AEM Akamai Cache flush Agent üòç" /><published>2021-04-25T00:00:00+10:00</published><updated>2021-05-05T10:52:27+10:00</updated><id>https://aem.design/blog/2021/04/25/creating-akamai-flush-agent</id><content type="html" xml:base="https://aem.design/blog/2021/04/25/creating-akamai-flush-agent">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;After the first hit to the page in aem and HTML response received for first time from publish instance will get cached on Akamai level.&lt;/p&gt;

&lt;p&gt;Subsequent request to the same page will be served from the cached content in Akamai rather than hitting dispatcher / publisher.&lt;/p&gt;

&lt;p&gt;Anytime did you struggled to get the latest HTML from publisher instead of Akamai cache?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Well we did!!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-we-have-done&quot;&gt;What we have done&lt;/h2&gt;

&lt;p&gt;We have worked on AEM replication agent for flushing Akamai cache whenever page gets published.&lt;/p&gt;

&lt;p&gt;So, after author change a page content and publish it our Akamai cache flush agent configured on publisher environment will pick that page and request to akamai for clearing cache. 
So that user of that page will get the latest content instead of cached old content from Akamai.&lt;/p&gt;

&lt;p&gt;It is all automated, we don‚Äôt need to clear the Akamai cache when new product goes live to prod.&lt;/p&gt;

&lt;p&gt;We don‚Äôt ask DevOps to clear Akamai cache so customers will see latest page. Lets save their 1-2 min(s) time whenever new product launch.&lt;/p&gt;

&lt;h2 id=&quot;where-you-can-find-the-code&quot;&gt;Where you can find the code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aem-design/aemdesign-aem-core/tree/master/aemdesign-aem-common/src/main/content/jcr_root/apps/aemdesign/components/replication/akamai&quot;&gt;Akamai Cache Flush Agent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aem-design/aemdesign-aem-core/blob/master/aemdesign-aem-services/src/main/java/design/aem/transport/AkamaiTransportHandler.java&quot;&gt;Akamai Transport Handler&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-are-all-details-do-you-need-to-setup-flush-agent&quot;&gt;What are all details do you need to setup flush agent&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;akamaiDomain&lt;/li&gt;
  &lt;li&gt;akamaiBaseUrl&lt;/li&gt;
  &lt;li&gt;akamaiPurgeUrlPath&lt;/li&gt;
  &lt;li&gt;clientToken&lt;/li&gt;
  &lt;li&gt;clientAccessToken&lt;/li&gt;
  &lt;li&gt;clientSecret&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you think you don‚Äôt know these info‚Äôs or not sure from where you can get it? Ask devOps these information and say I got your back if you provide me these info üòç&lt;/p&gt;

&lt;h2 id=&quot;how-we-are-managing-the-secrets&quot;&gt;How we are managing the secrets&lt;/h2&gt;

&lt;p&gt;After getting the above information from you, we are encrypting keys using AEM‚Äôs crypto support and storing it on AEM so you are safe with your secrets.
While we use it for making the POST call from Transport Handler we will decrypt the keys and use it.&lt;/p&gt;

&lt;p&gt;Also while making a POST call to Akamai servers we are using HMAC_SHA_256 to protect the data.&lt;/p&gt;

&lt;p&gt;Make sure you are configuring the Akamai cache flush agent on each environment separately&lt;/p&gt;

&lt;h2 id=&quot;how-to-configure-akamai-flush-agent-on-your-aem-author--publish-instance&quot;&gt;How to configure Akamai flush agent on your AEM author / publish instance&lt;/h2&gt;

&lt;p&gt;By Assuming you have installed aem design code into your local AEM.&lt;/p&gt;

&lt;h2 id=&quot;when-to-setup-on-author-and-when-to-setup-on-publish&quot;&gt;When to setup on author and when to setup on publish&lt;/h2&gt;

&lt;p&gt;Setup Akamai flush agent on AEM author instance only if you have akamai setup on author level as well. Mostly we will have Akamai setup for publish env.&lt;/p&gt;

&lt;p&gt;Always setup Akamai flush agent on publish level so as soon as the page reaches publish instance our Akamai flush agent will go ahead and clear Akamai Cache.&lt;/p&gt;

&lt;h2 id=&quot;how-to-setup-akamai-flush-agent&quot;&gt;How to setup Akamai flush agent&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&quot;http://localhost:4502/miscadmin&quot;&gt;miscadmin&lt;/a&gt; and open replication/agents.author for author instance &amp;amp; replication/agents.publish for publish instance&lt;/p&gt;

&lt;p&gt;here I‚Äôm showing example of setting flush agent in author level same time you can set it in publisher as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/akamai-flush-agent/akamai-replication-miscadmin.png&quot; alt=&quot;miscadmin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click new from tool bar and you will see the Create Page dialog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/akamai-flush-agent/akamai-create-agent.png&quot; alt=&quot;create new agent&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select ‚ÄúAkamai Publishing Replication‚Äù and give your replication agent a name &amp;amp; title.
Click on create and open the newly created agent on the list. (it will be the last entry on the list)
Click on Edit and provide the information required and click on Ok.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/akamai-flush-agent/akamai-settings-tab.png&quot; alt=&quot;settings tab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/akamai-flush-agent/akamai-config-tab.png&quot; alt=&quot;config_tab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You should be able to see the Akamai Flush Agent is On (green) and it will look for any replication events.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/akamai-flush-agent/akamai-enabled-agent.png&quot; alt=&quot;success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on Test Connection link and make sure you have all the correct configurations.
You should see ‚ÄúReplication test succeeded‚Äù&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This component will save our time whenever we need to update the content in AEM pages.&lt;/p&gt;

&lt;p&gt;Make sure you have set up the dispatcher flush agent as well so we can avoid content served from Dispatcher cache.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to us if you have any questions and don‚Äôt forget to tell your friends.&lt;/p&gt;

&lt;h3 id=&quot;thank-you&quot;&gt;Thank you&lt;/h3&gt;</content><author><name>Seenivasa Ragavan Soundar Rajan</name><email>mailtoragavan.be@gmail.com</email></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="akamai" /><category term="knowledge" /><category term="sharing" /><summary type="html">Why should we bother DevOps to clear Akamai Cache when you can do it yourself using flush agent</summary></entry><entry><title type="html">AEM SDK and JDK11</title><link href="https://aem.design/blog/2021/03/16/aem-sdk-jdk11" rel="alternate" type="text/html" title="AEM SDK and JDK11" /><published>2021-03-16T23:37:00+11:00</published><updated>2021-03-17T01:12:49+11:00</updated><id>https://aem.design/blog/2021/03/16/aem-sdk-jdk11</id><content type="html" xml:base="https://aem.design/blog/2021/03/16/aem-sdk-jdk11">&lt;p&gt;Building on the previous work &lt;a href=&quot;/blog/2019/07/01/docker-containers-everywhere&quot;&gt;Docker Containers Everywhere&lt;/a&gt;, &lt;a href=&quot;/blog/2019/09/04/aem-and-dockerüòçüòò&quot;&gt;AEM and Docker üòçüòò&lt;/a&gt; and &lt;a href=&quot;/blog/2019/08/30/docker-aem-bundle&quot;&gt;Docker AEM Bundle&lt;/a&gt; its time to bring AEM SDK and JDK11 into life!&lt;/p&gt;

&lt;p&gt;If you take a look &lt;a href=&quot;https://hub.docker.com/r/aemdesign/aem&quot;&gt;docker hub&lt;/a&gt; and &lt;a href=&quot;https://github.com/aem-design/docker-aem&quot;&gt;docker-aem&lt;/a&gt; branches you will find a couple of new additions that you will find helpful.&lt;/p&gt;

&lt;p&gt;JDK11 version of AEM 6.5 and AEM SDK version is now ready for use!&lt;/p&gt;

&lt;h3 id=&quot;running-aem-jdk-11-in-docker&quot;&gt;Running AEM JDK 11 in Docker&lt;/h3&gt;

&lt;p&gt;To start author AEM 6.5.5.0 with JDK11 run the following:&lt;/p&gt;

&lt;div class=&quot;code-copy-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot; aria-label=&quot;Copy code to clipboard&quot;&gt;&lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author655&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TZ=Australia/Sydney&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AEM_RUNMODE=-Dsling.run.modes=author,crx3,crx3tar,forms,localdev&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AEM_JVM_OPTS=-server -Xms248m -Xmx1524m -XX:MaxDirectMemorySize=256M -XX:+CMSClassUnloadingEnabled -Djava.awt.headless=true -Dorg.apache.felix.http.host=0.0.0.0 -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=58242,suspend=n -XX:+UseParallelGC --add-opens=java.desktop/com.sun.imageio.plugins.jpeg=ALL-UNNAMED --add-opens=java.base/sun.net.www.protocol.jrt=ALL-UNNAMED --add-opens=java.naming/javax.naming.spi=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xerces.internal.dom=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED -Dnashorn.args=--no-deprecation-warning&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-p4502&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-p30303&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;58242&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aemdesign/aem:6.5.5.0-jdk11&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To start author AEM SDK version 2021.3.4997 run the following:&lt;/p&gt;

&lt;div class=&quot;code-copy-header&quot;&gt;
  &lt;button class=&quot;copy-code-button&quot; aria-label=&quot;Copy code to clipboard&quot;&gt;&lt;/button&gt;
&lt;/div&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author202134997&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TZ=Australia/Sydney&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AEM_RUNMODE=-Dsling.run.modes=author,crx3,crx3tar,forms,localdev&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AEM_JVM_OPTS=-server -Xms248m -Xmx1524m -XX:MaxDirectMemorySize=256M -XX:+CMSClassUnloadingEnabled -Djava.awt.headless=true -Dorg.apache.felix.http.host=0.0.0.0 -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=58242,suspend=n -XX:+UseParallelGC --add-opens=java.desktop/com.sun.imageio.plugins.jpeg=ALL-UNNAMED --add-opens=java.base/sun.net.www.protocol.jrt=ALL-UNNAMED --add-opens=java.naming/javax.naming.spi=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xerces.internal.dom=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED -Dnashorn.args=--no-deprecation-warning&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-p4502&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-p30303&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;58242&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aemdesign/aem:sdk-2021.3.4997&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To make all this possible following Docker image chain has been updated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aem-design/docker-aem/tree/jdk11&quot;&gt;aemdesign/aem:jdk11&lt;/a&gt; - AEM Quickstart content
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aem-design/docker-aem-base/tree/jdk11&quot;&gt;aemdesign/aem-base:jdk11&lt;/a&gt; - AEM linux dependencies
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/aem-design/docker-java-ffmpeg/tree/jdk11&quot;&gt;aemdesign/java-ffmpeg:jdk11&lt;/a&gt; - provides ImageMagic and FFMpeg libraries
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;https://github.com/aem-design/docker-oracle-jdk/tree/jdk11&quot;&gt;aemdesign/oracle-jdk:jdk11&lt;/a&gt; - provides a an oracle jdk
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;https://github.com/aem-design/docker-centos-tini/tree/centos8&quot;&gt;aemdesign/centos-tini:centos8&lt;/a&gt; - provides a base for all java apps&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to these pipelines have been updated to allow Docker Image squash experimental option to ensure all images have the smallest amount of layers.&lt;/p&gt;

&lt;p&gt;Additionally, centos build pack has been updated to JDK 11 and Centos 8 with all the swiss army knife tools one expects.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aem-design/docker-centos-java-buildpack/tree/jdk11&quot;&gt;aemdesign/centos-java-buildpack:jdk11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thank-you&quot;&gt;Thank you&lt;/h3&gt;

&lt;p&gt;Please checkout the docker hub &lt;a href=&quot;https://hub.docker.com/r/aemdesign/aem&quot;&gt;aemdesign/aem&lt;/a&gt; for further details.&lt;/p&gt;

&lt;p&gt;If you would like to contribute or fork the code, you can get it on GitHub &lt;a href=&quot;https://github.com/aem-design&quot;&gt;https://github.com/aem-design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don‚Äôt forget to tell your friends.&lt;/p&gt;</content><author><name>Max Barrass</name><email>max@aem.design</email><uri>http://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="docker" /><summary type="html">Building on the previous work Docker Containers Everywhere, AEM and Docker üòçüòò and Docker AEM Bundle its time to bring AEM SDK and JDK11 into life!</summary></entry><entry><title type="html">Automation Testing For AEM Dialogs</title><link href="https://aem.design/blog/2021/01/21/automation-testing-for-aem-dialogs" rel="alternate" type="text/html" title="Automation Testing For AEM Dialogs" /><published>2021-01-21T00:37:00+11:00</published><updated>2021-04-27T02:36:37+10:00</updated><id>https://aem.design/blog/2021/01/21/automation-testing-for-aem-dialogs</id><content type="html" xml:base="https://aem.design/blog/2021/01/21/automation-testing-for-aem-dialogs">&lt;p&gt;Automation testing is an absolute mandatory and covered in &lt;a href=&quot;/blog/2017/06/28/automation-testing&quot;&gt;Automation Testing and Human Reporting&lt;/a&gt; and demonstrates a viable, usable AEM Automated Testing approach and does not make the automated testing suite a development only agenda.&lt;/p&gt;

&lt;p&gt;Over the last few years, AEM Automation Testing for AEM Dialog has been getting more focus, and I have been asked by many how to do this easily. The current approach leverages existing AEM Editor experience to view and load dialogs so that they can be tested. One of the improvements that have been asked can that be made faster so that actual pages do not require loading, so that spec execution speed improves.&lt;/p&gt;

&lt;p&gt;AEM being a gem of capabilities has this covered, and with little effort, we can leverage this to really create powerful specs that test component dialogues as a user would use them. The key to this is understanding how AEM loads component dialogs and the data they represent. Fortunately this pattern very simple using sling.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First you need a path to a dialog (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/apps/aemdesign/components/details/generic-details/v1/generic-details/_cq_dialog.html&lt;/code&gt;) this path is a component that takes as a parameter as a path to the component dialog should show and update.&lt;/li&gt;
  &lt;li&gt;Second you need a content path (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/content/aemdesign-showcase/au/en/component/details/generic-details/jcr:content/article/par/contentblock7/par/genericdetails&lt;/code&gt;) which dialog should update. This is simply any path that dialog will use for reading and wirting.&lt;/li&gt;
  &lt;li&gt;Third you combine these into a url you can use for automation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:4512/mnt/override/apps/aemdesign/components/details/generic-details/v1/generic-details/_cq_dialog.html/content/aemdesign-showcase/au/en/component/details/generic-details/jcr:content/article/par/contentblock7/par/genericdetails&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that‚Äôs it! Now you can write any tests around this URL. Taking this knowledge a spec can be updated to allow testing AEM Dialog with ease and without loading whole pages!&lt;/p&gt;

&lt;p&gt;Here is a reference AEM component dialog spec that tests of the tabs that appear on the component have the right content appearing. This is done simply by taking a screenshot of the dialog‚Äôs page.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;specs.component.details.genericdetails&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;spock.lang.Stepwise&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;support.AuthorDialogSpec&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Stepwise&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericDetailsAuthorDialogSpec&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthorDialogSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;components/details&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathSite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mnt/override/apps/aemdesign&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;generic-details/v1/generic-details/_cq_dialog&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageExtensionSuffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/content/aemdesign-showcase/au/en/component/details/generic-details/jcr:content/article/par/contentblock7/par/genericdetails&quot;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loginAsAdmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanupSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;analyzeLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Dialog of Component with Content&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;given:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Component dialog exist&quot;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;coral-dialog&quot;&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;when:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I open dialog with content&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/${pathSite}/${pathPage}/${componentPath}${pageExtension}${pageExtensionSuffix}&quot;&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;then:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The component dialog should render&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;waitFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;and:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Dialog should be able to open&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;showDialogDirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Dialog should be able to open&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;when:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;When I select Layout tab&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;selectDialogTab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Layout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;waitFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tabSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Layout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Layout tab selected&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;then:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Then it should have the Custom Layout options selected and matching configuration options&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;designRefFull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tab-layout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;where:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viewport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDialogViewPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you run this spec you will get an excellent report that will help you determine if the dialog works as you expected it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/automation-testing/dialog-test/generic-details-author-dialog.png&quot; alt=&quot;Automation Testing Report - Generic Details&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see this pattern will allow you to test AEM Dialogs especially if you are into making customised controls, if you are stuck, look at some examples in &lt;a href=&quot;https://github.com/aem-design/aemdesign-aem-support/blob/clean-up-compose-project/aemdesign-testing/src/test/groovy/specs/component/details/genericdetails/GenericDetailsAuthorDialogSpec.groovy&quot;&gt;GenericDetailsAuthorDialogSpec.groovy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don‚Äôt forget to tell your friends.&lt;/p&gt;</content><author><name>Max Barrass</name><email>max@aem.design</email><uri>http://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="testing" /><category term="automation-testing" /><summary type="html">Automation testing is an absolute mandatory and covered in Automation Testing and Human Reporting and demonstrates a viable, usable AEM Automated Testing approach and does not make the automated testing suite a development only agenda.</summary></entry><entry><title type="html">Creating Custom Workflow Step</title><link href="https://aem.design/blog/2021/01/18/creating-custom-workflow-step" rel="alternate" type="text/html" title="Creating Custom Workflow Step" /><published>2021-01-18T00:37:00+11:00</published><updated>2021-03-14T01:50:42+11:00</updated><id>https://aem.design/blog/2021/01/18/creating-custom-workflow-step</id><content type="html" xml:base="https://aem.design/blog/2021/01/18/creating-custom-workflow-step">&lt;p&gt;When writing custom workflow services, you may find yourself not seeing your service being recognised by the Process Step.
You will first encounter this when you don‚Äôt see your service appear in the process list on the dialog.
And once you verify the data source that feeds that dropdown at &lt;a href=&quot;http://localhost:4502/libs/cq/workflow/content/console/process.json&quot;&gt;http://localhost:4502/libs/cq/workflow/content/console/process.json&lt;/a&gt; you will wonder why.
You may also see errors like this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Could not find service for service reference {YOUR WORKFLOW STEP CLASS PATH} with label {no label}&lt;/code&gt; that could just tell you your class is missing property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process.label&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that you know, you add this property to your class and your class appear in the list, here is an example of how to add it:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;immediate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WorkflowProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;process.label=Content Fragment Page Generator&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also while debugging this, you may find some other errors polluting your docker logs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The activate method has thrown an exception (java.lang.IllegalStateException: org.apache.sling.api.resource.LoginException: Cannot derive user name for bundle com.adobe.acs.acs-aem-commons-bundle [553] and sub service workflowpackagemanager-service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To fix this, all you need to do is add missing service mapping mentioned in the message.
You should be able to replicate this by restarting your missing component at eg &lt;a href=&quot;http://localhost:4502/system/console/components/design.aem.workflow.process.ContentFragmentPageGenerator&quot;&gt;http://localhost:4502/system/console/components/design.aem.workflow.process.ContentFragmentPageGenerator&lt;/a&gt;.
In example above missing use name is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflowpackagemanager-service&lt;/code&gt; and bundle is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.adobe.acs.acs-aem-commons-bundle&lt;/code&gt;.
To add this missing entry do this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;open &lt;a href=&quot;http://localhost:4502/system/console/configMgr/&quot;&gt;http://localhost:4502/system/console/configMgr/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.adobe.acs.acs-aem-commons-bundle&lt;/code&gt; look for mapping in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apache Sling Service User Mapper Service Amendment&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;add or update blank entry with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.adobe.acs.acs-aem-commons-bundle:workflowpackagemanager-service=workflow-process-service&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully, after this, your custom workflow step will work, if you are stuck, look at some examples in &lt;a href=&quot;https://github.com/aem-design/aemdesign-aem-core/tree/develop/aemdesign-aem-services/src/main/java/design/aem/workflow/process&quot;&gt;aemdesign-aem-services/../workflow/process&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don‚Äôt forget to tell your friends.&lt;/p&gt;</content><author><name>Max Barrass</name><email>max@aem.design</email><uri>http://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="structure" /><category term="bugs-maybe" /><summary type="html">When writing custom workflow services, you may find yourself not seeing your service being recognised by the Process Step. You will first encounter this when you don‚Äôt see your service appear in the process list on the dialog. And once you verify the data source that feeds that dropdown at http://localhost:4502/libs/cq/workflow/content/console/process.json you will wonder why. You may also see errors like this Could not find service for service reference {YOUR WORKFLOW STEP CLASS PATH} with label {no label} that could just tell you your class is missing property process.label.</summary></entry><entry><title type="html">Using Docker to Build Code</title><link href="https://aem.design/blog/2020/07/24/using-docker-to-build-code" rel="alternate" type="text/html" title="Using Docker to Build Code" /><published>2020-07-24T23:37:00+10:00</published><updated>2021-03-14T01:50:42+11:00</updated><id>https://aem.design/blog/2020/07/24/using-docker-to-build-code</id><content type="html" xml:base="https://aem.design/blog/2020/07/24/using-docker-to-build-code">&lt;p&gt;When you have been working for a long time on a codebase, you don‚Äôt tend to test if your code can be compiled on other machines. Most of the time, it means that it won‚Äôt. But when you have Docker on your side, your dispair would be a one short docker command line deep.&lt;/p&gt;

&lt;p&gt;Using Docker to build your code is so easy even your friend will think you are cool when you tell them about it.  The most amazing thing that you don‚Äôt even need to write any Docker images, there are so many ready-to-go buildpack containers out there you can easily pick up something that you need.&lt;/p&gt;

&lt;p&gt;Here is an example of a container we use to do pipeline build and its very suitable for compiling your project on your local desktop. This container is a Centos 7 Jave Build Pack which means that it comes preconfigured with a majority of tools that are needed to compile our projects.&lt;/p&gt;

&lt;p&gt;This container comes with Jave, NPM and RVM, and you can take a look at the contents of the &lt;a href=&quot;https://github.com/aem-design/docker-centos-java-buildpack/blob/master/Dockerfile&quot;&gt;dockerfile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In power Shell:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;${PWD}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/build/source&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;${HOME}&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/.m2:/build/.m2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aemdesign/centos-java-buildpack&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/bin/bash&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--login&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Bash:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;:/build/source &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/.m2:/build/.m2 &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host aemdesign/centos-java-buildpack /bin/bash &lt;span class=&quot;nt&quot;&gt;--login&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let‚Äôs break this command down.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-it&lt;/code&gt; means run interactive terminal&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v ${PWD}:/build/source&lt;/code&gt; map current path into container at path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/build/source&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;in Powershell ${PWD} is same as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd&lt;/code&gt; in bash&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v ${HOME}/.m2:/build/.m2&lt;/code&gt; map your Maven cache folder into the container to reuse your already downloaded jars&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--net=host&lt;/code&gt; allow container to access your desktop localhost&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amdesign/centos-java-buildpack&lt;/code&gt; image to use&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/bash --login&lt;/code&gt; run bash and perform login to ensure all of the start-up profile scripts are executed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All you need to do now is to run this command in the directory where you have your code and start compiling like a boss.&lt;/p&gt;

&lt;p&gt;Don‚Äôt forget to tell your friends.&lt;/p&gt;</content><author><name>Max Barrass</name><email>max@aem.design</email><uri>http://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="docker" /><summary type="html">When you have been working for a long time on a codebase, you don‚Äôt tend to test if your code can be compiled on other machines. Most of the time, it means that it won‚Äôt. But when you have Docker on your side, your dispair would be a one short docker command line deep.</summary></entry><entry><title type="html">AEM SaaS Hands On üòçüöÄüî≠</title><link href="https://aem.design/blog/2020/02/01/aem-saas-hands-on%F0%9F%98%8D%F0%9F%9A%80%F0%9F%94%AD" rel="alternate" type="text/html" title="AEM SaaS Hands On üòçüöÄüî≠" /><published>2020-02-01T00:37:00+11:00</published><updated>2021-03-14T01:50:42+11:00</updated><id>https://aem.design/blog/2020/02/01/aem-saas-hands-on</id><content type="html" xml:base="https://aem.design/blog/2020/02/01/aem-saas-hands-on%F0%9F%98%8D%F0%9F%9A%80%F0%9F%94%AD">&lt;div class=&quot;sticky&quot;&gt;
    &lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
      &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fas fa-file-alt&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#aem-saas-author-hand-on&quot; id=&quot;markdown-toc-aem-saas-author-hand-on&quot;&gt;AEM SaaS Author Hand On&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#environments&quot; id=&quot;markdown-toc-environments&quot;&gt;Environments&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pipeline&quot; id=&quot;markdown-toc-pipeline&quot;&gt;Pipeline&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#aem-saas-pipelines-breakdown&quot; id=&quot;markdown-toc-aem-saas-pipelines-breakdown&quot;&gt;AEM SaaS Pipelines Breakdown&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#validation&quot; id=&quot;markdown-toc-validation&quot;&gt;Validation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build--unit-testing&quot; id=&quot;markdown-toc-build--unit-testing&quot;&gt;Build &amp;amp; Unit Testing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#code-scanning&quot; id=&quot;markdown-toc-code-scanning&quot;&gt;Code Scanning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build-images&quot; id=&quot;markdown-toc-build-images&quot;&gt;Build Images&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#deploy-to-dev&quot; id=&quot;markdown-toc-deploy-to-dev&quot;&gt;Deploy to Dev&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#aem-saas-pipelines-whats-missing&quot; id=&quot;markdown-toc-aem-saas-pipelines-whats-missing&quot;&gt;AEM SaaS Pipelines What‚Äôs missing&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#git-peer-review-workflow&quot; id=&quot;markdown-toc-git-peer-review-workflow&quot;&gt;Git Peer Review Workflow&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#automated-functional-testing&quot; id=&quot;markdown-toc-automated-functional-testing&quot;&gt;Automated Functional testing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#no-git-lfs&quot; id=&quot;markdown-toc-no-git-lfs&quot;&gt;No Git LFS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#no-felix-console&quot; id=&quot;markdown-toc-no-felix-console&quot;&gt;No Felix Console&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;/nav&gt;
&lt;/aside&gt;
&lt;/div&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;If &lt;a href=&quot;/blog/2019/10/20/enter-the-github-actions&quot;&gt;Github Actions&lt;/a&gt; was entry into End Game, latest Adobe AEM SaaS offering is the outcome of an End Game in another dimension, where Adobe is the clear victor! This stealthy engineering masterpiece is a true example of how great experience can provide so much, that words can‚Äôt describe the feeling.&lt;/p&gt;

&lt;p&gt;Adobes new offering it‚Äôs a true testament to engineering and a huge demonstration to all vendors in this space, on how to do things that make a difference. Not often you get your hands on a piece of SaaS software where you open the console and see something that takes your breath away. Your world is turned, and you whisper to yourself this can‚Äôt be true, it can‚Äôt be that easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Well folk, it is!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Latest offering from Adobe demonstrates their commitment on Experiences and not only for End Users but also for Developers.&lt;/p&gt;

&lt;p&gt;This new offering is the Kubernetes powered, container infused, sling application building behemoth, breathing CI/CD life into your projects with ease!&lt;/p&gt;

&lt;p&gt;You can find plenty post and materials about tech behind the platform, but this post is about the Experience! We want to see show off the new Cloud Manager experience. This post should provide you with inspiration to jump onto the CI/CD experience that Adobe have gifted upon us!&lt;/p&gt;

&lt;p&gt;So, without any further ado let‚Äôs jump straight to it.&lt;/p&gt;

&lt;h1 id=&quot;aem-saas-author-hand-on&quot;&gt;AEM SaaS Author Hand On&lt;/h1&gt;

&lt;p&gt;To start playing with your Cloud Manager experience you will need to access it thought your Adobe Experience portal, this will be provided for you by Adobe but for now you can follow our blog to get the insight and prepare you to roll-out your first project.&lt;/p&gt;

&lt;p&gt;First off you need to login to Adobe Experience Platform, this will allow you not only to login into AEC using your Adobe account but also provides same access to all AEM instances in the Cloud Manager! Which is amazing and so on SSO trend of 2020! Login screen is similar to the all of the login screens Adobe has been slowly introducing in last few years.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/adobe-aec/1-login.png&quot; alt=&quot;Adobe SSO Login Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can still use shared local admin accounts (you get one you share with Adobe) but it‚Äôs not something you should do in AEC and at all, for many painful reasons.&lt;/p&gt;

&lt;p&gt;Once you have logged in you will be redirected to the AEC dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/adobe-aec/2-adobe-experience-cloud-overview.png&quot; alt=&quot;AEM Adobe Experience Cloud Dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you click the Experience Manager icon you should see Cloud Manager card with Launch link.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/adobe-aec/2-adobe-experience-cloud-ams-cloudmanager.png&quot; alt=&quot;AEM Adobe Experience Cloud Manager Launch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking Launch on Cloud Manager card will lead you at AEC Program Overview page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/adobe-aec/4-aec-program-console.png&quot; alt=&quot;AEC - Cloud Manager - Program Overview &quot; /&gt;&lt;/p&gt;

&lt;p&gt;This console is your command centre for your environments and associated pipelines. From here you can control your environments, download logs, create and action pipelines. From now on this is the engine of your project!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/adobe-aec/5-aec-program-console-manage.png&quot; alt=&quot;AEC - Cloud Manager - Environments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First thing you will notice is the large banner across the top, this is your production status panel, it will report to you how your Production pipeline is going.&lt;/p&gt;

&lt;p&gt;Just under that you will see two sections Environments and Pipelines.&lt;/p&gt;

&lt;h2 id=&quot;environments&quot;&gt;Environments&lt;/h2&gt;

&lt;p&gt;Environments section allow you to check status of your environments, update and create new environments, download environment logs, access new environments, all of the features readily available and tucked away in the ellipsis (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...&lt;/code&gt;) revealing a simple menu with only but primary experiences you are looking for. Additionally, when you click the Details button in this section you will be taken to a details screen that will show you&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/adobe-aec/4-aec-program-console-environments-details.png&quot; alt=&quot;AEC - Cloud Manager - Environments Details&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Available Configuration is tied to your account and point allocated for environments. You will only be able to have environments that have been assigned to you by Adobe. Spinning up and tearing down of the environments is as simple as clicking a submenu item on the environment.&lt;/p&gt;

&lt;h2 id=&quot;pipeline&quot;&gt;Pipeline&lt;/h2&gt;

&lt;p&gt;Pipeline section allow you to create, update and run pipelines and this is broken down into Production and Non-Production. Manage Git button shows you a dialog that points you to the Adobe Git repo you will need to use when committing code.&lt;/p&gt;

&lt;p&gt;Although environments will be your initial focus it will very quickly switch to the Pipelines which you will spend most of your time watching. üòç&lt;/p&gt;

&lt;p&gt;So, let‚Äôs deep dive on the pipeline and what we can decipher from it‚Äôs logs.&lt;/p&gt;

&lt;h1 id=&quot;aem-saas-pipelines-breakdown&quot;&gt;AEM SaaS Pipelines Breakdown&lt;/h1&gt;

&lt;p&gt;Adobe pipeline offer is simple, it provides a dream pipeline process where you start with Adobe hosted Git Repo and fork into Quality or Deploy pipeline process.&lt;/p&gt;

&lt;p&gt;This is a simple methodology and it seem to work as it saves a bunch of time on a project. All the team need to do is just get their code into the repo and everything is done for them, that has not existed with this ease until now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/adobe-aec/7-aec-program-non-prod-pipeline-execution-complete.png&quot; alt=&quot;AEM Saas Program Console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can tell from the image the pipeline is divided into following stages&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Validation - initial verify of your repo?&lt;/li&gt;
  &lt;li&gt;Build &amp;amp; Unit Testing - maven build and test&lt;/li&gt;
  &lt;li&gt;Code Scanning - SonarQube evaluation&lt;/li&gt;
  &lt;li&gt;Build Images - Docker and Sling app build process&lt;/li&gt;
  &lt;li&gt;Deploy to Dev - Docker release and package install&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is similar process for PROD but with extra testing and approval steps.&lt;/p&gt;

&lt;p&gt;As you can see the Non-Prod Deploy pipeline breakdown is simple so now let‚Äôs look what is happening under covers, let‚Äôs talk about notable things that can be observed from the logs.&lt;/p&gt;

&lt;h2 id=&quot;validation&quot;&gt;Validation&lt;/h2&gt;
&lt;p&gt;No logs available for this but ‚ÄúYour Pipeline has been verified against a set of sanity checks.‚Äù could mean a lot of things, but it runs very fast so guessing it‚Äôs aim is just to check you have a Git repo with valid pom.xml that could be compiled, that could be a good start.&lt;/p&gt;

&lt;p&gt;This step takes about 5min to run from our tests.&lt;/p&gt;

&lt;h2 id=&quot;build--unit-testing&quot;&gt;Build &amp;amp; Unit Testing&lt;/h2&gt;

&lt;p&gt;In ‚Äúbuild_maven_build.log‚Äù you can see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[BUILD] Running maven build command(s)&lt;/code&gt; line and judging by what happens after that simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mvn package&lt;/code&gt; command is used as it compiles, tests and packages all modules in you project.&lt;/p&gt;

&lt;p&gt;This step runs for about 5min and it would depend on your package and test content. It‚Äôs not clear from the logs if the artifacts are cached at this step or after code scan.&lt;/p&gt;

&lt;h2 id=&quot;code-scanning&quot;&gt;Code Scanning&lt;/h2&gt;

&lt;p&gt;This is where magic is starting to come into play. First of you get a nice review summary screen that shows you what the damage of your latest code cram, and it‚Äôs cool way of summarising underlying tools!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/adobe-aec/7-aec-program-non-prod-pipeline-execution-complete-codescan.png&quot; alt=&quot;AEM Saas Pipleine CodeScan Result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition to this you get to see a CSV that shows you things that you need to fix.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File Location&lt;/th&gt;
      &lt;th&gt;Line Number&lt;/th&gt;
      &lt;th&gt;Issue&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Severity&lt;/th&gt;
      &lt;th&gt;Effort&lt;/th&gt;
      &lt;th&gt;Rule&lt;/th&gt;
      &lt;th&gt;Tags&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;design.aem:aemdesign-aem-common:2.0.618&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Node /apps/aemdesign/install is an OSGi config or install path which contains non-OSGi-related children that will not be visible to non-administrative users.&lt;/td&gt;
      &lt;td&gt;Bug&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;ConfigAndInstallShouldOnlyContainOsgiNodes&lt;/td&gt;
      &lt;td&gt;aem&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;design.aem:aemdesign-aem-common:2.0.618&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Node /apps/aemdesign/components/template/cloudconfig/addthisconnect/config is an OSGi config or install path which contains non-OSGi-related children that will not be visible to non-administrative users.&lt;/td&gt;
      &lt;td&gt;Bug&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;ConfigAndInstallShouldOnlyContainOsgiNodes&lt;/td&gt;
      &lt;td&gt;aem&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;design.aem:aemdesign-aem-common:2.0.618&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Node /apps/aemdesign/components/lists/searchlist/v2/searchlist/cq:dialog/content/items/layoutTab/items/column/items/config is an OSGi config or install path which contains non-OSGi-related children that will not be visible to non-administrative users.&lt;/td&gt;
      &lt;td&gt;Bug&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;ConfigAndInstallShouldOnlyContainOsgiNodes&lt;/td&gt;
      &lt;td&gt;aem&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;design.aem:aemdesign-aem-common:2.0.618&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Node /apps/aemdesign/global/dialog/touch/badge/content/items/badgeConfigTab/items/column/items/config is an OSGi config or install path which contains non-OSGi-related children that will not be visible to non-administrative users.&lt;/td&gt;
      &lt;td&gt;Bug&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;ConfigAndInstallShouldOnlyContainOsgiNodes&lt;/td&gt;
      &lt;td&gt;aem&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;design.aem:aemdesign-aem-common:2.0.618&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Node /apps/aemdesign/components/template/cloudconfig/googleanalytics/config is an OSGi config or install path which contains non-OSGi-related children that will not be visible to non-administrative users.&lt;/td&gt;
      &lt;td&gt;Bug&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;ConfigAndInstallShouldOnlyContainOsgiNodes&lt;/td&gt;
      &lt;td&gt;aem&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;design.aem:aemdesign-aem-common:2.0.618&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Node /apps/aemdesign/components/media/image/v2/image/cq:editConfig/cq:inplaceEditing/config is an OSGi config or install path which contains non-OSGi-related children that will not be visible to non-administrative users.&lt;/td&gt;
      &lt;td&gt;Bug&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;ConfigAndInstallShouldOnlyContainOsgiNodes&lt;/td&gt;
      &lt;td&gt;aem&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;design.aem:aemdesign-aem-common:2.0.618&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Node /apps/aemdesign/components/template/cloudconfig/googlemap/config is an OSGi config or install path which contains non-OSGi-related children that will not be visible to non-administrative users.&lt;/td&gt;
      &lt;td&gt;Bug&lt;/td&gt;
      &lt;td&gt;Major&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;ConfigAndInstallShouldOnlyContainOsgiNodes&lt;/td&gt;
      &lt;td&gt;aem&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;PS. this is the complete list of issues that we got for first deploy of AEM.Design to Adobe SaaS offering.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just looking at this the reported Severity seems to be very opinionated and super conservative. Having a readme file in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/apps/aemdesign/install&lt;/code&gt; folder does not make it a Major defect, but this it probably just splitting hairs at this point and removing that file is trivial.&lt;/p&gt;

&lt;p&gt;Errors such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/apps/aemdesign/components/template/cloudconfig/addthisconnect/config is an OSGi config or install path which contains non-OSGi-related children that will not be visible to non-administrative users.&lt;/code&gt; seem to fail the blank &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; node name rule and yes this is Major once again.&lt;/p&gt;

&lt;p&gt;These trivial issues will get some great solution in time as this is a great process to put in place for all AEM project from the start. Many AEM project will benefit from establishing initial baseline and would provide a clear for quality path.&lt;/p&gt;

&lt;p&gt;This step takes about 5min to run, this would depend on amount of code you throw at it.&lt;/p&gt;

&lt;h2 id=&quot;build-images&quot;&gt;Build Images&lt;/h2&gt;

&lt;p&gt;This phase is responsible for generating two brand new Docker images that has all of your new code embedded into it. First image will contain all of your project contents and second image will be a final merged version of your project with latest AEM base image.&lt;/p&gt;

&lt;p&gt;Essentially process builds a custom CRX-Quickstart with your features(converted packages) embedded into it from the start, this does mean that you will not be able to download or delete the packages using CRX/DE and with added benefit of separating these code package from actual content in your repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/adobe-aec/11-aem-saas-crxde-packages.png&quot; alt=&quot;AEM Saas CRX/DE Packages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The logs show standard Docker build process with bunch of parameters being passed to the Docker build process. Namely the build process relies on Packages that were built in previous steps these are passed as a URL list which are downloaded and converted to &lt;a href=&quot;https://github.com/apache/sling-org-apache-sling-feature&quot;&gt;Sling Features&lt;/a&gt; using tool similar to &lt;a href=&quot;https://github.com/apache/sling-org-apache-sling-feature-cpconverter&quot;&gt;sling-org-apache-sling-feature-cpconverter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The process also creates a list of packages that are have content to be installed into repository, this list is used in deploy step.&lt;/p&gt;

&lt;p&gt;All the packages once converted get store into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main/features/generated-author&lt;/code&gt; with relevant JSON files describing features in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main/features/generated/001_sew-aem-common.json&lt;/code&gt;. After this a maven build process is executed to compile your features into latest version (at the time of writing 6.6.0-V17414) of AEM Quickstart. Adobe has indicated that they are moving towards daily releases so this means that this process will pick up latest version of AEM when it‚Äôs available.&lt;/p&gt;

&lt;p&gt;After this conversion and merger of AEM sling features, AEM image is started as container to initialise it‚Äôs segment store. Once the instance is initialising it‚Äôs stopped and Apache Jackrabbit Oak maintenance is executed, first checkpoint then compact. Once this is done both docker images are uploaded to Adobes Docker Image Repository. And this same process repeats for Publish images changing runmode=publish in the process.  At the end of this process which takes around 10-15 min to run you end up with Author and Publish images sizing at 4GB each.&lt;/p&gt;

&lt;h2 id=&quot;deploy-to-dev&quot;&gt;Deploy to Dev&lt;/h2&gt;

&lt;p&gt;Deploy phase starts with downloading content packages that were isolated in previous phase. Followed by starting and waiting for Author instance, at which is tries to install downloaded packages into the instance and stop the instance on completion.&lt;/p&gt;

&lt;p&gt;After this next process start the author and runs a bunch of bash scripts, that enable features, nodestore, blobstore, logging, set admin password validate and link license key. After this AEM is started once again and once ready is stopped and Oak Indexes are regenerated.&lt;/p&gt;

&lt;p&gt;After this 10+ min step that instance is started again and marked as available for use, which is not recoded in logs and must be an extra step outside of the pipeline.&lt;/p&gt;

&lt;p&gt;As you can see this is straight forward pipeline that just works. Lets discuss the obvious question that is at the top our mind right about now. What‚Äôs missing?&lt;/p&gt;

&lt;h1 id=&quot;aem-saas-pipelines-whats-missing&quot;&gt;AEM SaaS Pipelines What‚Äôs missing&lt;/h1&gt;

&lt;p&gt;Well as this is hosted on AEM there will be a few CI/CD limitations. Limitations are good as they provide less distraction and an opportunity to improve. Here are the things that we find missing so far, they are not deal breakers but good to keep on the back of your mind.&lt;/p&gt;

&lt;h2 id=&quot;git-peer-review-workflow&quot;&gt;Git Peer Review Workflow&lt;/h2&gt;

&lt;p&gt;Adobe Git is only a URL to which you push your code, these days all development should revolve around Pull Request Approval process. Covering benefits of this is not required as they are covered in great depth in many articles.&lt;/p&gt;

&lt;p&gt;To enable this process to happen on your projects you will need to use external Git repo and manage code reviews there before you publish this final code into Adobe Git.&lt;/p&gt;

&lt;p&gt;This is a small inconvenience and it‚Äôs readily fixed seeing as all companies these days have a form of Git and in cases where that‚Äôs not the case, GitHub, Bitbucket and Gitlab all support this process for free. Additionally, these tools have built in pipeline tools that will help you to push code to Adobe Git.&lt;/p&gt;

&lt;h2 id=&quot;automated-functional-testing&quot;&gt;Automated Functional testing&lt;/h2&gt;

&lt;p&gt;Screenshot testing using Selenium or other testing tools is not in and you would need to cater for that yourselves. Most obvious reason for this as there is no one way of doing this and everyone does what they need for their situation.&lt;/p&gt;

&lt;p&gt;Additionally, current Deploy pipelines are fixed to a specific flow which you cannot change. This means that in cases where you need to do automated functional testing you would need to do this using external pipeline.&lt;/p&gt;

&lt;p&gt;Potentially you could just run your automation test tool of choice manually against a Dev instance in the Adobe environment. But in cases where you would like this to be automated you would have followed another approach.&lt;/p&gt;

&lt;p&gt;One approach could be is to still have external Git repo and a pipeline that could build and test code and on success push it to Adobe Git for release to Dev cycle. This would be an ok mechanism as you could do this free on GitHub using containers see &lt;a href=&quot;https://aem-design.github.io/aemdesign-aem-support-output/&quot;&gt;Exhibit 1&lt;/a&gt; that runs in GitHub Actions pipeline. Plus, you would get PR ability.&lt;/p&gt;

&lt;h2 id=&quot;no-git-lfs&quot;&gt;No Git LFS&lt;/h2&gt;

&lt;p&gt;If you are using Git Lfs you going to need to revert to plain git as there is not Git Lfs in Adobe‚Äôs Git and you will end up publishing pointers to your images into AEM.&lt;/p&gt;

&lt;h2 id=&quot;no-felix-console&quot;&gt;No Felix Console&lt;/h2&gt;

&lt;p&gt;There is no Felix Console, but there is a brand-new custom Developers Console that provides very limited tools that you might use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/adobe-aec/12-developer-console-status.png&quot; alt=&quot;AEM New Developer Console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Standard Felix console does have a lot of features and some can cause a few issues so it‚Äôs no surprise it‚Äôs not available and have been replaced with a tool that allows you download that for review.&lt;/p&gt;

&lt;p&gt;Here are some of the available screens, Status screen will be your main go-to console to download content of some frequently used Felix console.&lt;/p&gt;

&lt;style&gt;
    .image-gallery {overflow: auto; margin-left: -1%!important;}
    .image-gallery li {float: left; display: block; margin: 0 0 1% 1%; width: 19%;}
    .image-gallery li a {text-align: center; text-decoration: none!important; color: #777;}
    .image-gallery li a span {display: block; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; padding: 3px 0;}
    .image-gallery li a img {width: 100%; display: block;}
&lt;/style&gt;

&lt;ul class=&quot;image-gallery&quot;&gt;
    &lt;li&gt;
        &lt;a href=&quot;/assets/images/adobe-aec/developerconsole/12-developer-console-java-packages.png&quot; title=&quot;12-developer-console-java-packages&quot;&gt;&lt;img src=&quot;https://images.weserv.nl/?url=aem.design/assets/images/adobe-aec/developerconsole/12-developer-console-java-packages.png&amp;amp;w=300&amp;amp;h=300&amp;amp;output=png&amp;amp;q=50&amp;amp;t=square&quot; alt=&quot;12-developer-console-java-packages&quot; title=&quot;12-developer-console-java-packages&quot; /&gt;&lt;span&gt;12-developer-console-java-packages&lt;/span&gt;&lt;/a&gt;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;a href=&quot;/assets/images/adobe-aec/developerconsole/12-developer-console-queries.png&quot; title=&quot;12-developer-console-queries&quot;&gt;&lt;img src=&quot;https://images.weserv.nl/?url=aem.design/assets/images/adobe-aec/developerconsole/12-developer-console-queries.png&amp;amp;w=300&amp;amp;h=300&amp;amp;output=png&amp;amp;q=50&amp;amp;t=square&quot; alt=&quot;12-developer-console-queries&quot; title=&quot;12-developer-console-queries&quot; /&gt;&lt;span&gt;12-developer-console-queries&lt;/span&gt;&lt;/a&gt;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;a href=&quot;/assets/images/adobe-aec/developerconsole/12-developer-console-servlets.png&quot; title=&quot;12-developer-console-servlets&quot;&gt;&lt;img src=&quot;https://images.weserv.nl/?url=aem.design/assets/images/adobe-aec/developerconsole/12-developer-console-servlets.png&amp;amp;w=300&amp;amp;h=300&amp;amp;output=png&amp;amp;q=50&amp;amp;t=square&quot; alt=&quot;12-developer-console-servlets&quot; title=&quot;12-developer-console-servlets&quot; /&gt;&lt;span&gt;12-developer-console-servlets&lt;/span&gt;&lt;/a&gt;
    &lt;/li&gt;

    &lt;li&gt;
        &lt;a href=&quot;/assets/images/adobe-aec/developerconsole/12-developer-console-status-download-logs.png&quot; title=&quot;12-developer-console-status-download-logs&quot;&gt;&lt;img src=&quot;https://images.weserv.nl/?url=aem.design/assets/images/adobe-aec/developerconsole/12-developer-console-status-download-logs.png&amp;amp;w=300&amp;amp;h=300&amp;amp;output=png&amp;amp;q=50&amp;amp;t=square&quot; alt=&quot;12-developer-console-status-download-logs&quot; title=&quot;12-developer-console-status-download-logs&quot; /&gt;&lt;span&gt;12-developer-console-status-download-logs&lt;/span&gt;&lt;/a&gt;
    &lt;/li&gt;

&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;As this is an Adobe‚Äôs work in progress and the masterpiece is not finished yet, it‚Äôs expected that new features will be added as adoption grows.&lt;/p&gt;

&lt;p&gt;It will not take you long to get used to all the options and you will soon be longing for this simplicity in everything. Alternatives experiences to this are far more complicated and although they are fun to create, they can divert your attention and that you need not to do anymore!&lt;/p&gt;

&lt;p&gt;From development perspective there are a lot of features that you will not see migrated which is a good thing, as Adobe‚Äôs engineers have a good handle on what is used and it‚Äôs usefulness beyond just being there part of a legacy.&lt;/p&gt;

&lt;p&gt;So, we hope you have had just enough content to give you a quick overview and excite you to jump on board.&lt;/p&gt;

&lt;p&gt;There is a whole array of documentation available at your favourite site in the &lt;a href=&quot;https://docs.adobe.com/content/help/en/experience-manager-cloud-manager/using/introduction-to-cloud-manager.html&quot;&gt;Experience Manager Cloud Manager Help&lt;/a&gt; section, explore the new capability that is at your disposal and review official docs if you get stuck.&lt;/p&gt;

&lt;p&gt;As always if you want more drop us a line, checkout the code and submit some issues if you find any.&lt;/p&gt;</content><author><name>Max Barrass</name><email>max@aem.design</email><uri>http://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="saas" /><category term="knowledge" /><category term="sharing" /><category term="handson" /><summary type="html">This is the End Game and Adobe has it, a non-definitive perspective!</summary></entry><entry><title type="html">AEM Magento Integration üòçüöÄüî≠</title><link href="https://aem.design/blog/2020/03/06/aem-magento-integration%F0%9F%98%8D%F0%9F%9A%80%F0%9F%94%AD" rel="alternate" type="text/html" title="AEM Magento Integration üòçüöÄüî≠" /><published>2020-02-01T00:37:00+11:00</published><updated>2021-04-26T11:04:40+10:00</updated><id>https://aem.design/blog/2020/03/06/aem-magento-integration</id><content type="html" xml:base="https://aem.design/blog/2020/03/06/aem-magento-integration%F0%9F%98%8D%F0%9F%9A%80%F0%9F%94%AD">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;AEM when integrated with an eCommerce provider provides a great experience for online shopping functionalities.&lt;/p&gt;

&lt;p&gt;eCommerce functionality is inherent in AEM which shows from demo sites like we retail.
As AEM provides very perfect handling of content like authoring and publishing and managing assets, integrating it with eCommerce system provides a perfect way to build a robust eCommerce site.&lt;/p&gt;

&lt;p&gt;AEM connects with eCommerce providers, Like SAP Commerce, Salesforce, Magento and more. AEM provides specific eCommerce frameworks to connect to eCommerce providers.
In this blog we are going to see how AEM connects to Magento eCommerce. There are two ways to connect to an eCommerce provider Adobe IO or Commerce Integration Framework for a provider.
Because AEM provides a Commerce Integration Framework connector to connect to Magento, we will be using that. CIF uses GraphQL queries to talk to Magento and bring data.&lt;/p&gt;

&lt;p&gt;Note: To connect to eCommerce providers other than Magento we need to go through Adobe IO. For more info visit. : https://www.adobe.io/apis/experiencecloud/commerce-integration-framework/faq.html&lt;/p&gt;

&lt;p&gt;Let‚Äôs jump into the steps to implement CIF now.&lt;/p&gt;

&lt;p&gt;The commerce integration framework can be found at below locations. Adobe provides production ready components also which can be used.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adobe/aem-core-cif-components&quot;&gt;AEM CIF components&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adobe/commerce-cif-connector&quot;&gt;AEM- CIF connector and authoring tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Build the CIF connector framework or add in your dependencies. Once installed in AEM we can get option to configure the integration properties.
Two configurations have to be done. GraphQL client configuration and CIF catalog Magento configuration.&lt;/p&gt;

&lt;p&gt;Below are the steps where we have configured these.&lt;/p&gt;

&lt;h3 id=&quot;cif-graphql-client-configuration-factory&quot;&gt;CIF GraphQL Client Configuration Factory&lt;/h3&gt;

&lt;p&gt;Add GraphQL service ‚Äì https://magento-hostname/graphql&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aem-magento-integration/graphql-client-configuration.png&quot; alt=&quot;GraphQL client configuration&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cif-catalog-magento-graphql-configuration-factory&quot;&gt;CIF Catalog Magento GraphQL Configuration Factory&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/aem-magento-integration/cif-magento-graphql-configuration.png&quot; alt=&quot;CIF magento graphql configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once configured Test the connection in postman, using below query. Results depend on correct products configuration in Magento also.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
	category(id: 2) {
		id, name, url_path, product_count, children_count, children {
			id, name, url_path, product_count, children_count, children {
				id, name, url_path, product_count, children_count, children {
					id, name, url_path, product_count, children_count, children {
						id, name, url_path, product_count, children_count
					}
				}
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The response must return results with exact numbers. A sample result is below&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
	&quot;data&quot;: {
		&quot;category&quot;: {
			&quot;id&quot;: 2,
			&quot;name&quot;: &quot;Default Category&quot;,
			&quot;url_path&quot;: null,
			&quot;product_count&quot;: 7,
			&quot;children_count&quot;: &quot;3&quot;,
			&quot;children&quot;: [{
				&quot;id&quot;: 5,
				&quot;name&quot;: &quot;Mens&quot;,
				&quot;url_path&quot;: &quot;mens-shirts&quot;,
				&quot;product_count&quot;: 2,
				&quot;children_count&quot;: &quot;1&quot;,
				&quot;children&quot;: [{
					&quot;id&quot;: 6,
					&quot;name&quot;: &quot;Footwear&quot;,
					&quot;url_path&quot;: &quot;mens-shirts\/footwear&quot;,
					&quot;product_count&quot;: 1,
					&quot;children_count&quot;: &quot;0&quot;,
					&quot;children&quot;: []
				}]
			}, {
				&quot;id&quot;: 4,
				&quot;name&quot;: &quot;SubCategory01&quot;,
				&quot;url_path&quot;: &quot;subcategory01&quot;,
				&quot;product_count&quot;: 2,
				&quot;children_count&quot;: &quot;0&quot;,
				&quot;children&quot;: []
			}]
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it‚Äôs time to create binding in AEM Commerce. This will fetch us the products from Magento to use anywhere or in commerce components.&lt;/p&gt;

&lt;p&gt;Below image describes the binding configuration.
&lt;img src=&quot;/assets/images/aem-magento-integration/magento-binding.png&quot; alt=&quot;Binding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once binding is successfully done, results can be seen in AEM ecommerce. The below image shows results in AEM ecommerce after successful binding with Magento.
&lt;img src=&quot;/assets/images/aem-magento-integration/Product-Shoe.png&quot; alt=&quot;Binding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;</content><author><name>Saket Mishra</name><email>saket.mishra.kr@gmail.com</email></author><category term="blog" /><summary type="html">Integrate AEM with Magento to us eCommerce functionality!</summary></entry><entry><title type="html">AEM Framework for Multi-Tenant Environments.</title><link href="https://aem.design/blog/2020/01/12/aem-framework-for-multi-tenant-environments" rel="alternate" type="text/html" title="AEM Framework for Multi-Tenant Environments." /><published>2020-01-12T00:37:00+11:00</published><updated>2021-03-14T01:50:42+11:00</updated><id>https://aem.design/blog/2020/01/12/aem-framework-for-multi-tenant-environments</id><content type="html" xml:base="https://aem.design/blog/2020/01/12/aem-framework-for-multi-tenant-environments">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;AEM.Design is about identifying best practices and patterns that should be embedded and used a starting point for creating solutions for AEM. Our approach is to combine these best practices and patterns into the open-source framework that can accelerate projects and provide a pathway for sharing knowledge with the community in a consumable production-ready framework. A lot of articles detail individual knowledge fragments that at times useful on their own but do not provide a clear direction for end-use. We have tried to create a consolidated reference end-to-end approach with AEM.design framework and tools.&lt;/p&gt;

&lt;p&gt;This initiative aims at collating best practices and patterns that are proven to be useful on projects. It aims to leverage best practices not only from AEM knowledge base but also leverage best of the best from Front End, Automation Testing, DevOps and another related enablement tech. The aim of this initiative to provide a framework that can fit into existing solution practices without mandating a particular process.&lt;/p&gt;

&lt;p&gt;All of the code is located in GitHub, Docker Hub, SonarCloud and published to Maven central.&lt;/p&gt;

&lt;p&gt;Best place to start with this framework is to try out the Docker Bundle that has the framework and demo of all of the components. You can find how to get started here: https://aem.design/blog/2019/08/30/docker-aem-bundle&lt;/p&gt;

&lt;p&gt;Our archetype project is aimed to generate a new tenant project that has all of the components required to run the AEM implementation project. It including automation tests, site showcase, frontend code implementation and component overrides tailored to you tenant name and project.&lt;/p&gt;

&lt;p&gt;If you have any questions on particular issues you can raise issues in GitHub for repos there are a few of them.&lt;/p&gt;

&lt;p&gt;Creating and managing an environment for Multi-Tenants requires considerable upfront planning. Starting AEM project is easy, and you can feel a great sense of velocity early on. Although your initial velocity will make you feel comfortable, this might not last and avoid future pitfalls is hard once you have released to production. To avoid pitfalls of the future means that you will need to be aware of some of the pitfalls you might encounter upfront, and this is very hard to convey and predict.&lt;/p&gt;

&lt;p&gt;To protect projects from encountering technical pitfalls in the future, it‚Äôs recommended to follow several product best practices. A sheer number of best practices and patterns is overwhelming, and it‚Äôs tough for new entrants to appreciate all of the suggested practices. We found that establishing a set of goals and principles early on helps to provide a project with a pathway to success.&lt;/p&gt;

&lt;p&gt;Technical patterns are easily avoided by leveraging frameworks that seek to embed knowledge into a useful framework. Providing input into business processes is a more complicated endeavour due to the way the project can be executed. From our experience, teams need to aim to establish a common design language which is used to communicate requirements and create an efficient delivery process that builds trust in the tools being used. This requires having open dialogue at the start of the project to ensure everyone is on the same page and are willing to commit to trusting automation process.&lt;/p&gt;

&lt;p&gt;Following sections outline some of the elements of knowledge that should be kept in mind when establishing a project for a single site or multi-tenant sites.&lt;/p&gt;

&lt;h1 id=&quot;business-approach&quot;&gt;Business approach&lt;/h1&gt;

&lt;p&gt;Be very transparent with the whole team, and every person needs to understand that they will all be required to login into AEM and use it, PMs and steak holders included, after all, it‚Äôs their future digital platform. Everyone must learn the basic terminology of AEM and Design Language that will be used to describe requirements, this avoids confusion for everyone, and everyone should be encouraging peers to use correct language.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select primary Business Analyst to run project knowledge transfer, this will be your primary conduit&lt;/li&gt;
  &lt;li&gt;The project team focus is primarily on Authoring Experience, as this what will enable authors to create the visual experiences they want&lt;/li&gt;
  &lt;li&gt;Create a common Design Language to ensure designers and BA‚Äôs lead the conversation of explaining how designs are authored in AEM, not in some other external concepts&lt;/li&gt;
  &lt;li&gt;Establish a religious training for all end-users of AEM&lt;/li&gt;
  &lt;li&gt;Create a showcase of you chosen components and walk everyone (including stakeholders) thought it, showcase must be used for functional tests, so it‚Äôs not a throwaway&lt;/li&gt;
  &lt;li&gt;Establish a common knowledge repository for sharing knowledge while AEM project is running, use Confluence as it‚Äôs most accessible, do not treat this knowledge base as a dumping ground of notes, treat it like a knowledge book for the future. This space is for people to see what you have built not read endless meeting notes, all admin related content should not be primary focus for the space&lt;/li&gt;
  &lt;li&gt;Establish a author training site that will be updated by Authors and BAs, this should be like any other tenant&lt;/li&gt;
  &lt;li&gt;Delay all modification to core Authoring Experience, use YAGNI banner especially if everyone is new to AEM&lt;/li&gt;
  &lt;li&gt;Component that appears in multiples experiences(pages) and show same data structure but different visual presentation are variant of same component.&lt;/li&gt;
  &lt;li&gt;Focus on identifying Unique Experiences and Unique components Variants that make up those Unique Experiences.&lt;/li&gt;
  &lt;li&gt;Ensure analytics is discussed as Definition of Ready for each component.&lt;/li&gt;
  &lt;li&gt;Focus on content taxonomies to ensure content structure can scale from the start in DAM, Content Fragments, Experience Fragments, Tags, Forms and Site Pages. Each site should be in its own tenant folder with additional contextual segmentation that   should apply for each type of content.&lt;/li&gt;
  &lt;li&gt;Site Content must always be in Region/Language structure with primary Country and Language as default, essentially your site must be multi languish compatible from the start.&lt;/li&gt;
  &lt;li&gt;Do not let Information Architecture dictate site Content Architecture&lt;/li&gt;
  &lt;li&gt;All legacy SEO ideas and practices (anything that does not talk about microdata in page and components) could be tested using Functional Automation Tests using the Build in AEM Hobes framework. Doing this will allows authors to test their content when they create it. If it can‚Äôt be automatically tested, it‚Äôs not a requirement; it‚Äôs 2020 excuses don‚Äôt apply so to drop that requirement if it can‚Äôt be tested.&lt;/li&gt;
  &lt;li&gt;Acceptance Criteria and Acceptance tests must be part of Definition of Ready for DEV&lt;/li&gt;
  &lt;li&gt;Automation testing is not optional, and it‚Äôs the only way to verify Definition of Ready.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;technology-approach&quot;&gt;Technology Approach&lt;/h1&gt;

&lt;p&gt;For single and Multi-Tenant Projects consider that each site is a ‚Äútenant‚Äù not a sling workspace tenant but more of a virtual tenant used to segregate content from each site. This addition provides a method for security policies to be applied as users create content, as well as provide a clean separation of content and application code is required, especially as you are working of a single component codebase.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a showcase with your chosen components which are maintained Developers throughout development and Testers when helping to test&lt;/li&gt;
  &lt;li&gt;Focus on Functional Automation Testing for all components with Authoring (does dialog work), Publishing (does it interact in publish) and Screenshot (does it look right) perspectives. Automation test suit is for the team not for selected few it does not have to be pretty is need to be quick to adopt and allow testing other web services, Selenium still works.&lt;/li&gt;
  &lt;li&gt;Leverage Docker containers to ensure you are running consistent versions of services across all environments and especially Developers desktops, see Operations/Docker project&lt;/li&gt;
  &lt;li&gt;Run AEM with Segment and Datastore separates from the start&lt;/li&gt;
  &lt;li&gt;Leverage external ESB tool for API dev, eg ApacheNifi, try not to write API‚Äôs in AEM, external API tools can template/translate requests into direct Sling API request.&lt;/li&gt;
  &lt;li&gt;Offload processing to Kubernetes container farm to leverage containers.&lt;/li&gt;
  &lt;li&gt;Use overlays for each component per each site, as you will be using multiple framework eventually, this will allow you so substitute/update components in the future.&lt;/li&gt;
  &lt;li&gt;Segregate content of each ‚Äútenant‚Äù into individual sites; this pattern also applies to a number of locations where content is created by authors&lt;/li&gt;
  &lt;li&gt;Ensure Pipelines for build and deploy are established as soon as git and repos are created.&lt;/li&gt;
  &lt;li&gt;Ensure dispatchers and present for Author and Publish instances&lt;/li&gt;
  &lt;li&gt;Ensure that Frontend code is package as a stand-alone package and Page Client Libs are used to include in Templates, see Support/Compose module.&lt;/li&gt;
  &lt;li&gt;Leverage VLT tool to export and backup content from prod and import into Development environments as required, packages don‚Äôt work for large content farms&lt;/li&gt;
  &lt;li&gt;Leverage Ansible to persists logic for environment configuration, see Operations/Deploy and Operations/Ansible-Roles project.&lt;/li&gt;
  &lt;li&gt;Ensure dispatcher config is in code and in a Docker container, see Docker-Dispatcher repo&lt;/li&gt;
  &lt;li&gt;Do not allow manual modification of services/servers via console etc follow Configuration as Code for all infrastructure and services, especially servers, preferably run Centos Atomic edition which will force Docker usage, see Operations/VM project for how to generate Centos Atomic VMs appliances.&lt;/li&gt;
  &lt;li&gt;Leverage Content Fragments for structured content, use templated component to present that content.&lt;/li&gt;
  &lt;li&gt;Leverage Experience Fragments for building reusable Page Sections.&lt;/li&gt;
  &lt;li&gt;Do not build footer and header as massive components, instead create experience fragments and add them to Site Root page and inherit it thought the tree.&lt;/li&gt;
  &lt;li&gt;Ensure Analytics content can be updated by authors&lt;/li&gt;
  &lt;li&gt;Use Data Layer spec to output analytics content in page header&lt;/li&gt;
  &lt;li&gt;Use Data Layer spec to manage all fields that will be output by components and use for analytics&lt;/li&gt;
  &lt;li&gt;Do not implement any components that use any inline javascript for Analytics, no matter what.&lt;/li&gt;
  &lt;li&gt;Ensure each component has a unique ID attribute&lt;/li&gt;
  &lt;li&gt;Ensure each component you output is easily distinguishable from other stuff AEM adds, AEM.Design uses Boolean attribute ‚Äúcomponent‚Äù&lt;/li&gt;
  &lt;li&gt;Use lists for re-using content for presentation, look at Generic Details and List components for reference, they provide dynamic field specific templating and expose of component content without dumping all of the content on the page. Hiding 48 out of 50 fields of a component content is poor design, output only content you need, see Component Variant and List Badge patterns.&lt;/li&gt;
  &lt;li&gt;Separate config into a separate package and use run-modes&lt;/li&gt;
  &lt;li&gt;Separate authoring experience updates into a separate package&lt;/li&gt;
  &lt;li&gt;Use ACS Commons tools and check them before you build new components.&lt;/li&gt;
  &lt;li&gt;When using components from frameworks consider the impact on authoring experience, different frameworks have different authoring possibilities, with some making Authoring very Front End heavy without enabling Authors.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a non-exhaustive list, but it should be a good start starting point.&lt;/p&gt;

&lt;p&gt;As always, we welcome contributions this list, let us know by leaving a comment or better yet raise an issue in the repo.&lt;/p&gt;

&lt;p&gt;Share this on your favourite network if you find this useful.&lt;/p&gt;</content><author><name>Max Barrass</name><email>max@aem.design</email><uri>http://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="docker" /><category term="knowledge" /><category term="sharing" /><category term="multi-tenant" /><category term="framework" /><summary type="html">Notes to get you started creating a Multi-Tenant Environments on AEM</summary></entry><entry><title type="html">Enter the Github Actions üòòüêôüöÄ</title><link href="https://aem.design/blog/2019/10/20/enter-the-github-actions%F0%9F%98%98%F0%9F%90%99%F0%9F%9A%80" rel="alternate" type="text/html" title="Enter the Github Actions üòòüêôüöÄ" /><published>2019-10-20T00:37:00+11:00</published><updated>2021-03-14T01:50:42+11:00</updated><id>https://aem.design/blog/2019/10/20/enter-the-github-actions</id><content type="html" xml:base="https://aem.design/blog/2019/10/20/enter-the-github-actions%F0%9F%98%98%F0%9F%90%99%F0%9F%9A%80">&lt;style&gt;
.page__hero--overlay p, .page__hero--overlay h1{
    background-color: rgba(23,168,23, 0.6);
    max-width: fit-content !important;
    border-radius: 25px;
    padding: 10px;
}
&lt;/style&gt;

&lt;p&gt;CI/CD space if going off like a bunch of emoji in a url! But one thing you can be sure is to kiss üòò your all-enveloping üêô pipeline tools good bye and put on your seat belt, as the pipeline mother-ship is taking off üöÄ!&lt;/p&gt;

&lt;p&gt;Travis, Gitlab, Jenkins, Azure DevOps, CircleCI, Codeship all of these and more are awesome pipeline tools! We use them daily, they do us proud of things that we can accomplish with effort alone in this virtual world of ours. They make us happy when we move our piplines from one provider to another by giving us latest YAML syntax. They make us happy when they give us badges that we wear with pride in our readme‚Äôs! They give us fancy plugins and cli tools that make us rewrite all of our pipelines over and over!&lt;/p&gt;

&lt;p&gt;But late night wrestling with CI tools does leave feelings of doubt deep in your mind, maybe this is not the end game. Yes pulling data across the oceans so that you can just build the code does seem ok and mirroring your repos to another build system so that your Git LFS quota does not get smashed is worthy battle. But you wonder should you need to do all that and is there a better way.&lt;/p&gt;

&lt;p&gt;We know that big things come from little things, so all the small battles with these awesome tools seem to be a built up to something big. All these battles helped us to figure out what we really need from these pipeline tools.&lt;/p&gt;

&lt;p&gt;And it seems that the ask is much firmer now after all the experimenting and it goes something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I want my code to be in a place where everyone can get at it.&lt;/li&gt;
  &lt;li&gt;I want my code base to be respected by everyone&lt;/li&gt;
  &lt;li&gt;I want my pipeline to be right there with the code so that I dont need to worry about any smudges, submodules and other solvable unknowns.&lt;/li&gt;
  &lt;li&gt;I want this YAML config to be easy to understand and simple to follow, like Travis but with more YAML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sure there is things to consider but for lets see where this takes us.&lt;/p&gt;

&lt;p&gt;Now to be clear Travis is #1 until you need to run something longer than 50min then is Azure DevOps at #2. Travis is simple and it give you exactly what you want and for free. Azure DevOps is the all in one package that you dream of, but you need to move your code from Github. ü§î&lt;/p&gt;

&lt;p&gt;Gitlab is awesome for a few years we have been running on it, running over quotas etc pain full but worth while experience right up to archiving all project and moving to github. Gitlab is a great one-stop-shop if you want to run on-prem, as there is Github and Azure in paid categories, that compete at different level.&lt;/p&gt;

&lt;p&gt;Github has become the defacto standard for open source projects. Yes Azure has tried to capture the market and its done a bloody great job and Gihub is now owned by Mirosoft, and we will see who will win the internal pageant in the end but there will always be open source favorite.&lt;/p&gt;

&lt;p&gt;But all of this really does not really matter for now, what matters is that Github announced and delivered on their promise to have pipelines built into their offering. This was a long throw of a spanner and it has been is slow motion for a year, but it landed and pressed the tak off button! And its looking good! Yes there are features missing, but it wont be long.&lt;/p&gt;

&lt;p&gt;Amazingly it seems that they copied some of the Azure DevOps pipeline components and have improved on them! This makes Github an absolute steal for open source project as its now one stop shop for all of your needs. It‚Äôs astonishing how much &lt;a href=&quot;https://help.github.com/en/github/automating-your-workflow-with-github-actions/about-github-actions&quot;&gt;value this offers&lt;/a&gt; it leaves you with the thought what is the catch?! There aint none atm and I do hope they wont do Larry Ellison on us in a few years. Obviously people will just move to where there is more common sense.&lt;/p&gt;

&lt;p&gt;For now we have started to migrate all of our pipelines from Travis to Github Actions, so far it has been a very quick migration there are many guides how to migrate but if you know your pipelines its simpler to just get started!&lt;/p&gt;

&lt;h3 id=&quot;from-travis-to-github-actions---the-non-definitive-guide&quot;&gt;From Travis to Github Actions - the non definitive guide&lt;/h3&gt;

&lt;p&gt;To get started all you need to do is make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/main.yml&lt;/code&gt; file in your project with following content:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CI&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;GLOBAL_VAR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;i am global&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;SECRET_VAR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.SECRET_VAR }}&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# set this in Github Repo -&amp;gt; Setting -&amp;gt; Secrets&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;run a one-line script&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo Hello, world!&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run a multi-line script&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo Add other actions to build,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo test, and deploy your project.&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;run a one-line script with if&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github.ref == 'refs/heads/master'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo Hello, world!&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;set step output and set some vars&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stepwithoutputs&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo ::set-env name=COOL_OUTPUT::HELLO THERE ENV&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo ::set-output name=COOL_OUTPUT::HELLO THERE OUTPUT&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dump some vars&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo STEP_OUTPUT_MAP=${STEP_OUTPUT_MAP}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo STEP_OUTPUT=${STEP_OUTPUT}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo STEP_SET_ENV_VAR=${STEP_SET_ENV_VAR}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo JOB_VAR=${JOB_VAR}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;STEP_OUTPUT_MAP&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ toJson(steps.stepwithoutputs.outputs) }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;STEP_OUTPUT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ steps.stepwithoutputs.outputs.COOL_OUTPUT }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;STEP_SET_ENV_VAR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.COOL_OUTPUT }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;JOB_VAR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.SECRET_VAR }}&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;meeDamian/github-release@1.0&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.GITHUB_TAG }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.GITHUB_TAG }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.GIT_RELEASE_NOTES }}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here you can see common items that you could use in your simple pipeline, its a good start for converting your pipelines.&lt;/p&gt;

&lt;p&gt;Then you can go ahead and replace steps with the ones you have in your travis file. Here are some how to notes on things that you will need to know:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name:&lt;/code&gt; at the top is the ID of action so keep that short.&lt;/li&gt;
  &lt;li&gt;unlike Travis there is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jobs/&amp;lt;job_id&amp;gt;&lt;/code&gt; layout where you can separate your flow if you need, initially having everything in one job is easiest, you can refactor once you have more requirements.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uses&lt;/code&gt; mean using another pre made action from marketplace, you pass parameters to actions using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;you can use bash variables in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; steps but you need to use ‚ÄúContext Expression‚Äù when doing it on other YAML attributes such &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when&lt;/code&gt; or passing variables to things.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; is added directly to step YAML and you use Context Expressions to evaluate your logic, ex check if current branch is master: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if: github.ref == 'refs/heads/master'&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export&lt;/code&gt; a variable to environment you need to do following echo command format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo ::set-env name={name}::{value}&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;you can also set step outputs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::set-output name={name}::{value}&lt;/code&gt; that allow you to reference this step it in Context Expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steps.&amp;lt;step_id&amp;gt;.outputs.&amp;lt;variable&amp;gt;&lt;/code&gt; this separates global from step variables.&lt;/li&gt;
  &lt;li&gt;to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env&lt;/code&gt; variables in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; steps you can just do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${DOCKER_REGISTRY}&lt;/code&gt; this will evaluate the variable as bash variable.&lt;/li&gt;
  &lt;li&gt;to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env&lt;/code&gt; in YAML parts such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; etc you need to use Content Expressions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; this will evaluate the variable as bash variable.&lt;/li&gt;
  &lt;li&gt;to pass secrets to steps or use them in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env&lt;/code&gt; variables use the Content Expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;check Awesome List of Must Have Actions in your Pipeline](https://github.com/sdras/awesome-actions) for custom actions that will replace comparable Travis actions, example &lt;a href=&quot;https://github.com/marketplace/actions/github-release-create-update-and-upload-assets&quot;&gt;meeDamian/github-release@1.0&lt;/a&gt; replaces Travis &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy&lt;/code&gt; step.&lt;/li&gt;
  &lt;li&gt;caching is not there yet but will be available in November 2019.&lt;/li&gt;
  &lt;li&gt;you can use Build Matrix see &lt;a href=&quot;https://help.github.com/en/articles/workflow-syntax-for-github-actions&quot;&gt;Github Actions YAML Syntax&lt;/a&gt; for more info&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following is a list of resource you should use to learn about syntax before you stat googling.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/en/github/automating-your-workflow-with-github-actions/metadata-syntax-for-github-actions&quot;&gt;YAML Syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/en/articles/workflow-syntax-for-github-actions&quot;&gt;Github Actions YAML Syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/en/github/automating-your-workflow-with-github-actions/development-tools-for-github-actions&quot;&gt;Setting Variables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/en/articles/virtual-environments-for-github-actions&quot;&gt;Global Variables and Secrets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions&quot;&gt;Context Expression and Global Context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sdras/awesome-actions&quot;&gt;Awesome List of Must Have Actions in your Pipeline&lt;/a&gt; - check this before googling&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.community/t5/GitHub-Actions/bd-p/actions&quot;&gt;Github Actions Forum&lt;/a&gt; - search here before googling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For better comparison here is an actual &lt;a href=&quot;https://github.com/aem-design/docker-toughday/blob/master/.travis.yml&quot;&gt;Travis pipeline&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;java&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tag is blank&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;docker'&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PACKAGE_PATH=&quot;$(pwd)/packages&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;directories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$PACKAGE_PATH&lt;/span&gt;


&lt;span class=&quot;na&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;(curl&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-sL&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://github.com/aem-design/aemdesign-docker/releases/latest/download/get_config.sh)&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo GET PACKAGES&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo $PACKAGE_PATH&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ ! -d $PACKAGE_PATH ]]; then mkdir $PACKAGE_PATH; fi&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo PACKAGES CONTENTS $PACKAGE_PATH&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ls -latr $PACKAGE_PATH&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo DOWNLOAD PACKAGES INTO ${PACKAGE_PATH}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./scripts/download.sh &quot;$PACKAGE_PATH/&quot; &quot;-&quot; &quot;-&quot; &quot;https://helpx.adobe.com/experience-manager/6-2/sites/developing/using/tough-day/_jcr_content/main-pars/download-section/download-1/file.res/toughday-6.1.jar&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./scripts/download.sh &quot;$PACKAGE_PATH/&quot; &quot;-&quot; &quot;-&quot; &quot;https://repo.adobe.com/nexus/content/repositories/releases/com/adobe/qe/toughday2/0.9.2/toughday2-0.9.2.jar&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./scripts/download.sh &quot;$PACKAGE_PATH/&quot; &quot;-&quot; &quot;-&quot; &quot;https://repo.adobe.com/nexus/content/repositories/releases/com/adobe/qe/toughday2/0.2.1/toughday2-0.2.1.jar&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ls -latr $PACKAGE_PATH&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;(curl&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-sL&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://github.com/aem-design/aemdesign-docker/releases/latest/download/get_version.sh)&quot;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;#build and test&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build --pull -t $IMAGE:$IMAGE_VERSION .&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;export CONTAINER_COMMAND=&quot;docker run $IMAGE:$IMAGE_VERSION $TEST_COMMAND&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo CONTAINER_COMMAND=$CONTAINER_COMMAND&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;export CONTAINER_OUTPUT=$(eval $CONTAINER_COMMAND)&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo CONTAINER_OUTPUT=$CONTAINER_OUTPUT&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ ! ${CONTAINER_OUTPUT} =~ ${TEST_COMMAND_VERIFY} ]]; then travis_terminate 1; fi&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker images&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#test&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;LOGIN TO HUB.DOCKER&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;PUSH HUB.DOCKER&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push $IMAGE:$IMAGE_VERSION&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ $TRAVIS_BRANCH == &quot;master&quot; ]]; then docker tag $IMAGE:$IMAGE_VERSION $IMAGE:latest &amp;amp;&amp;amp; docker push $IMAGE:latest; fi&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;UPDATE README IN HUB.DOCKER&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ $TRAVIS_BRANCH == &quot;master&quot; ]]; then docker run --rm -v $(pwd):/data/ aemdesign/dockerhub-description &quot;$DOCKER_USERNAME&quot; &quot;$DOCKER_PASSWORD&quot; &quot;$IMAGE&quot;; fi&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## Get the project version&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;before_deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ $TRAVIS_BRANCH == &quot;master&quot; ]]; then git tag $TRAVIS_TAG; fi&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## Create release in GitHub&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;releases&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$TRAVIS_TAG&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$TRAVIS_TAG&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target_commitish&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;api_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$GITHUB_TOKEN&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;skip_cleanup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Its ported version looks very similar &lt;a href=&quot;https://github.com/aem-design/docker-toughday/blob/master/.github/workflows/build.yml&quot;&gt;Gitub Actions&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DOCKER_REGISTRY&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker.io&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ORGANISATION_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aemdesign&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DOCKER_USERNAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.DOCKER_USERNAME }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DOCKER_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.DOCKER_PASSWORD }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;set envirnment variables&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;config&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo GET PACKAGES&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;export PACKAGE_PATH=$(pwd)/packages&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo ::set-env name=PACKAGE_PATH::${PACKAGE_PATH}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;source &amp;lt;(curl -sL https://github.com/aem-design/aemdesign-docker/releases/latest/download/github_get_config.sh)&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo $PACKAGE_PATH&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;if [[ ! -d $PACKAGE_PATH ]]; then mkdir $PACKAGE_PATH; fi&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo PACKAGES CONTENTS $PACKAGE_PATH&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;ls -latr $PACKAGE_PATH&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo DOWNLOAD PACKAGES INTO ${PACKAGE_PATH}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;./scripts/download.sh &quot;$PACKAGE_PATH/&quot; &quot;-&quot; &quot;-&quot; &quot;https://helpx.adobe.com/experience-manager/6-2/sites/developing/using/tough-day/_jcr_content/main-pars/download-section/download-1/file.res/toughday-6.1.jar&quot;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;./scripts/download.sh &quot;$PACKAGE_PATH/&quot; &quot;-&quot; &quot;-&quot; &quot;https://repo.adobe.com/nexus/content/repositories/releases/com/adobe/qe/toughday2/0.9.2/toughday2-0.9.2.jar&quot;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;./scripts/download.sh &quot;$PACKAGE_PATH/&quot; &quot;-&quot; &quot;-&quot; &quot;https://repo.adobe.com/nexus/content/repositories/releases/com/adobe/qe/toughday2/0.2.1/toughday2-0.2.1.jar&quot;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;ls -latr $PACKAGE_PATH&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;source &amp;lt;(curl -sL https://github.com/aem-design/aemdesign-docker/releases/latest/download/github_get_version.sh)&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build and test docker image&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;docker build --pull -t $IMAGE:$IMAGE_VERSION .&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;source &amp;lt;(curl -sL https://github.com/aem-design/aemdesign-docker/releases/latest/download/container_verify.sh)&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;(cd test &amp;amp;&amp;amp; ./run_tests.sh &quot;$IMAGE:$IMAGE_VERSION&quot;)&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;docker images&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;login to docker registry&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;${{ secrets.DOCKER_PASSWORD }}&quot; | docker login ${DOCKER_REGISTRY} -u &quot;${{ secrets.DOCKER_USERNAME }}&quot; --password-stdin&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;push image version&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push $IMAGE:$IMAGE_VERSION&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;push latest image on master&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github.ref == 'refs/heads/master'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;docker tag $IMAGE:$IMAGE_VERSION $IMAGE:latest&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;docker push $IMAGE:latest&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;update registry description with readme on master&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github.ref == 'refs/heads/master'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;docker run --rm -v $(pwd):/data/ aemdesign/dockerhub-description &quot;$DOCKER_USERNAME&quot; &quot;$DOCKER_PASSWORD&quot; &quot;$IMAGE&quot;&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;meeDamian/github-release@1.0&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.GITHUB_TAG }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.GITHUB_TAG }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ env.GIT_RELEASE_NOTES }}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Differences are almost minor and migration follow copy-paste approach for majority of pipeline which is ideal. That‚Äôs all there is to this migration all you have to do now is commit and head to the Actions console in your repo to see your build take off üöÄ as the next stop is the moon!&lt;/p&gt;

&lt;p&gt;As always checkout the code, fork, extend and contribute if you wish.&lt;/p&gt;</content><author><name>Max Barrass</name><email>max@aem.design</email><uri>http://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="docker" /><category term="automation" /><category term="github" /><category term="actions" /><category term="github-actions" /><summary type="html">We are in the end game now</summary></entry><entry><title type="html">Updating Existing Docker Container Variables üí™üòéüëç</title><link href="https://aem.design/blog/2019/09/19/updating-existing-docker-container-variables%F0%9F%92%AA%F0%9F%98%8E%F0%9F%91%8D" rel="alternate" type="text/html" title="Updating Existing Docker Container Variables üí™üòéüëç" /><published>2019-09-19T00:37:00+10:00</published><updated>2021-03-14T01:50:42+11:00</updated><id>https://aem.design/blog/2019/09/19/updating-docker-container-variables</id><content type="html" xml:base="https://aem.design/blog/2019/09/19/updating-existing-docker-container-variables%F0%9F%92%AA%F0%9F%98%8E%F0%9F%91%8D">&lt;p&gt;Updating docker config of an existing container can be a daunting task. Usually its just easier to kill the container and start from scratch and this approach is preferred when it comes to docker principles.&lt;/p&gt;

&lt;p&gt;As of current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;19+&lt;/code&gt; version of docker there isn‚Äôt a way to do it via API, this mean that you need to manually change config of container in the docker engine running your container.&lt;/p&gt;

&lt;p&gt;Flow on effect is that when you change this docker config you will need to restart docker engine, which is fine when you have only one container running but if you have lots this is out of the question.&lt;/p&gt;

&lt;p&gt;But lets say you have just started AEM instance not using the &lt;a href=&quot;/blog/2019/08/30/docker-aem-bundle&quot;&gt;AEM Bundle&lt;/a&gt; container, without mounting any volumes and you have spent last hour installing packages and doing thing to that container that you do not want to do again. And you got an urge to do some java code debugging on your new container and you just realised that you did not add the required debug JAVA_OPTS when you started the container:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;-Xdebug&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Xrunjdwp&lt;/span&gt;:transport&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dt_socket,server&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y,address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;58242,suspend&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Starting from scratch will be good option by using the &lt;a href=&quot;/blog/2019/08/30/docker-aem-bundle&quot;&gt;AEM Bundle&lt;/a&gt; by all those changes you made will be lost. At this point in despair you forget what paths you updated and you decide to persevere with updating docker engine config.&lt;/p&gt;

&lt;p&gt;You can follow these steps to update your existing container config with java options that will allow you to debug your AEM instance in a container:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Stop your container&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stop author
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Edit config of your container&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Running following command will load the docker config into VI and where you can proceed to update your container config:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/lib/docker:/var/lib/docker alpine vi &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker inspect &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/var/lib/docker/containers/{{.Id}}/config.v2.json'&lt;/span&gt; author65bundle&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see config on one line, yes this is how it is and you need to thread carefully.&lt;/p&gt;

&lt;p&gt;In our case you will need to scroll until you find  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AEM_JVM_OPTS&lt;/code&gt; attribute scroll to the end its value and insert (press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; to enter ) AEM Java Debug parameters:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;-Xdebug&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Xrunjdwp&lt;/span&gt;:transport&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dt_socket,server&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y,address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;58242,suspend&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESC&lt;/code&gt; key followed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:qw&lt;/code&gt; and press enter.&lt;/p&gt;

&lt;p&gt;You now have your config tweak inserted and you can proceed.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Restart your docker&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In worst case you can just reboot, in best case you can restart the service or use restart option of your Docker Desktop Menu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/docker/docker-desktop-menu.png&quot; alt=&quot;Docker Desktop Menu&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Check your settings tweaks have worked&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After your docker engine is backup you can check if your tweaks have worked&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker inspect author
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Start your container&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker start author
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This process can be used to update other settings as you wish.&lt;/p&gt;</content><author><name>Max Barrass</name><email>max@aem.design</email><uri>http://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="docker" /><category term="automation" /><summary type="html">If you have to update existing docker container properties you can do it here is how</summary></entry></feed>