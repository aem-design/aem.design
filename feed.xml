<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://aem.design/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aem.design/" rel="alternate" type="text/html" /><updated>2023-04-05T12:12:48+10:00</updated><id>https://aem.design/feed.xml</id><title type="html">AEM.Design</title><subtitle>An amazing website.</subtitle><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;location&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;label&quot;=&gt;&quot;Email&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-envelope-square&quot;}, {&quot;label&quot;=&gt;&quot;Website&quot;, &quot;icon&quot;=&gt;&quot;fas fa-fw fa-link&quot;}, {&quot;label&quot;=&gt;&quot;Twitter&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-twitter-square&quot;}, {&quot;label&quot;=&gt;&quot;Facebook&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-facebook-square&quot;}, {&quot;label&quot;=&gt;&quot;GitHub&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-github&quot;}, {&quot;label&quot;=&gt;&quot;Instagram&quot;, &quot;icon&quot;=&gt;&quot;fab fa-fw fa-instagram&quot;}]}</name></author><entry><title type="html">Docker Dispatcher SDK üîßüí™üòéüëç</title><link href="https://aem.design/blog/2023/04/05/docker-dispatcher-sdk%F0%9F%94%A7%F0%9F%92%AA%F0%9F%98%8E%F0%9F%91%8D" rel="alternate" type="text/html" title="Docker Dispatcher SDK üîßüí™üòéüëç" /><published>2023-04-05T00:37:00+10:00</published><updated>2023-04-05T12:11:15+10:00</updated><id>https://aem.design/blog/2023/04/05/docker-dispatcher-sdk</id><content type="html" xml:base="https://aem.design/blog/2023/04/05/docker-dispatcher-sdk%F0%9F%94%A7%F0%9F%92%AA%F0%9F%98%8E%F0%9F%91%8D"><![CDATA[<p>This article is a follow up to series of articles on docker <a href="/blog/2019/07/01/docker-containers-everywhere">Docker Containers Everywhere</a> and <a href="/blog/2019/07/05/docker-automation-testing">Docker Automation Testing</a>.</p>

<p>Now that we have a solid foundation on how to build and test docker containers we can move on to the next step and that is to build a docker container that will allow us to test our AEM Dispatcher configuration.</p>

<h2 id="dispatcher-sdk">Dispatcher SDK</h2>

<p>Dispatcher SDK is shipped by Adobe though <a href="https://experienceleague.adobe.com/docs/experience-manager-cloud-service/implementing/developing/dispatcher-sdk.html?lang=en#overview">Adobe Experience Manager as a Cloud Service SDK</a> and it is a docker container that allows you to test your dispatcher configuration.</p>

<p>The only non-starter with this container is that it is not available on docker hub and you need to build it yourself manually üëéüí©.</p>

<p>Running a container to test your dispatcher configuration must be as simple as running following command:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span><span class="w"> </span><span class="nx">run</span><span class="w"> </span><span class="nt">-it</span><span class="w"> </span><span class="nt">--rm</span><span class="w"> </span><span class="nt">-v</span><span class="w"> </span><span class="nv">${PWD}</span><span class="nx">/dispatcher/src:/mnt/dev/src</span><span class="w"> </span><span class="nt">--name</span><span class="w"> </span><span class="nx">dispatcher</span><span class="w"> </span><span class="nt">-p</span><span class="w"> </span><span class="nx">8080:80</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="nx">AEM_PORT</span><span class="o">=</span><span class="mi">4503</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="n">AEM_HOST</span><span class="o">=</span><span class="n">host.docker.internal</span><span class="w"> </span><span class="nx">aemdesign/dispatcher-sdk</span><span class="w">
</span></code></pre></div></div>

<p>or on Linux</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="nt">-v</span> <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/dispatcher/src:/mnt/dev/src <span class="nt">--name</span> dispatcher <span class="nt">-p</span> 8080:80 <span class="nt">-e</span> <span class="nv">AEM_PORT</span><span class="o">=</span>4503 <span class="nt">-e</span> <span class="nv">AEM_HOST</span><span class="o">=</span>host.docker.internal aemdesign/dispatcher-sdk
</code></pre></div></div>

<p>This will map source from your dispatcher configuration to the container and start the container. Additionally it will expose port 8080 on your host machine and map it to port 80 on the container. Furthermore in the console output you will output of the validation of your dispatcher configuration. This is critical to make sure that your dispatcher configuration is valid and will work as expected once you push this to Adobe Cloud Manager. This dispatcher image has debug set to trace so you will see all the details of how your dispatcher rule apply.</p>

<p>You can checkout the source for this container here <a href="https://github.com/aem-design/docker-dispatcher-sdk">aem-design/docker-dispatcher-sdk</a>. Feel free to contribute to this project.</p>

<h2 id="integrating-with-aem">Integrating with AEM</h2>

<p>To integrate this with AEM you need to make sure that you have a dispatcher configuration that is valid and that you can run it locally. Once you have that you can use the following docker-compose file to start your AEM instance and the dispatcher SDK.</p>

<p>This is should be your typical AEM docker-compose file with the addition of the dispatcher SDK container. This allows your team to use same configuration for local development and testing. This will also allow testing of SSL configurations and other dispatcher configurations that are not possible to test locally universaly across all type of OS. This allows you to test same way on all OS‚Äôs.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.9"</span>

<span class="na">services</span><span class="pi">:</span>

  <span class="na">author</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">aemdesign/aem:sdk-2023.3.11382</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">author</span>
    <span class="na">healthcheck</span><span class="pi">:</span>
      <span class="na">test</span><span class="pi">:</span> <span class="s">curl -u admin:admin --header Referer:localhost --silent --connect-timeout 5 --max-time 5 http://localhost:8080/system/console/bundles.json | grep -q \"state\":\"Installed\" &amp;&amp; exit 1 || exit </span><span class="m">0</span>
      <span class="na">interval</span><span class="pi">:</span> <span class="s">10s</span>
      <span class="na">timeout</span><span class="pi">:</span> <span class="s">10s</span>
      <span class="na">retries</span><span class="pi">:</span> <span class="m">20</span>
      <span class="na">start_period</span><span class="pi">:</span> <span class="s">1s</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">4502:8080</span>
      <span class="pi">-</span> <span class="s">30303:58242</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">AEM_RUNMODE=-Dsling.run.modes=author,crx3,crx3tar,localdev,nosamplecontent</span>
      <span class="pi">-</span> <span class="s">AEM_JVM_OPTS=-server -Xms248m -Xmx4524m -XX:MaxDirectMemorySize=256M -XX:+CMSClassUnloadingEnabled -Djava.awt.headless=true -Dorg.apache.felix.http.host=0.0.0.0 -Xdebug -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:58242</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">author-data:/aem/crx-quickstart/repository</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="c1"># note that you want this frontened to match the last. otherwise it will match login.${HOST_DOMAIN}"</span>
      <span class="na">traefik.frontend.priority</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">traefik.enable</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">traefik.http.routers.author.rule</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Host(`author.localhost`)"</span>
      <span class="na">traefik.http.routers.author.entrypoints</span><span class="pi">:</span> <span class="s">web</span>
      <span class="na">traefik.http.routers.author_https.rule</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Host(`author.localhost`)"</span>
      <span class="na">traefik.http.routers.author_https.tls</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">traefik.http.routers.author_https.entrypoints</span><span class="pi">:</span> <span class="s">websecure</span>
      <span class="na">traefik.http.services.author.loadbalancer.passHostHeader</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">author-network</span>
      <span class="pi">-</span> <span class="s">publish-network</span>
      <span class="pi">-</span> <span class="s">dispatcher-network</span>
      <span class="pi">-</span> <span class="s">internal</span>
      <span class="pi">-</span> <span class="s">default</span>

  <span class="na">publish</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">aemdesign/aem:sdk-2023.3.11382</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">publish</span>
    <span class="na">healthcheck</span><span class="pi">:</span>
      <span class="na">test</span><span class="pi">:</span> <span class="s">curl -u admin:admin --header Referer:localhost --silent --connect-timeout 5 --max-time 5 http://localhost:8080/system/console/bundles.json | grep -q \"state\":\"Installed\" &amp;&amp; exit 1 || exit </span><span class="m">0</span>
      <span class="na">interval</span><span class="pi">:</span> <span class="s">10s</span>
      <span class="na">timeout</span><span class="pi">:</span> <span class="s">10s</span>
      <span class="na">retries</span><span class="pi">:</span> <span class="m">20</span>
      <span class="na">start_period</span><span class="pi">:</span> <span class="s">30s</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">4503:8080</span>
      <span class="pi">-</span> <span class="s">30304:58242</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">AEM_RUNMODE=-Dsling.run.modes=publish,crx3,crx3tar,localdev,nosamplecontent</span>
      <span class="pi">-</span> <span class="s">AEM_JVM_OPTS=-server -Xms248m -Xmx1524m -XX:MaxDirectMemorySize=256M -XX:+CMSClassUnloadingEnabled -Djava.awt.headless=true -Dorg.apache.felix.http.host=0.0.0.0 -Xdebug -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:58242</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="c1"># note that you want this frontend to match the last. otherwise, it will match login.${HOST_DOMAIN}"</span>
      <span class="na">traefik.frontend.priority</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">traefik.enable</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">traefik.http.routers.publish.rule</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Host(`publish.localhost`)"</span>
      <span class="na">traefik.http.routers.publish.entrypoints</span><span class="pi">:</span> <span class="s">web</span>
      <span class="na">traefik.http.routers.publish_https.rule</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Host(`publish.localhost`)"</span>
      <span class="na">traefik.http.routers.publish_https.tls</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">traefik.http.routers.publish_https.entrypoints</span><span class="pi">:</span> <span class="s">websecure</span>
      <span class="na">traefik.http.services.publish.loadbalancer.passHostHeader</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">publish-data:/aem/crx-quickstart/repository</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">publish-network</span>
      <span class="pi">-</span> <span class="s">internal</span>
      <span class="pi">-</span> <span class="s">default</span>

  <span class="na">dispatcher</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">aemdesign/dispatcher-sdk</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">dispatcher</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8081:80</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">AEM_PORT=4503</span>
      <span class="pi">-</span> <span class="s">AEM_HOST=host.docker.internal</span>
      <span class="pi">-</span> <span class="s">DISP_LOG_LEVEL=trace1</span> <span class="c1">#debug</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="c1"># note that you want this frontend to match the last. otherwise, it will match login.${HOST_DOMAIN}"</span>
      <span class="na">traefik.frontend.priority</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">traefik.enable</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">traefik.http.routers.dispatcher.rule</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Host(`dispatcher.localhost`)"</span>
      <span class="na">traefik.http.routers.dispatcher.entrypoints</span><span class="pi">:</span> <span class="s">web</span>
      <span class="na">traefik.http.routers.dispatcher_https.rule</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Host(`dispatcher.localhost`)"</span>
      <span class="na">traefik.http.routers.dispatcher_https.tls</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">traefik.http.routers.dispatcher_https.entrypoints</span><span class="pi">:</span> <span class="s">websecure</span>
      <span class="na">traefik.http.services.dispatcher.loadbalancer.passHostHeader</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./dispatcher/src/:/mnt/dev/src/</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">publish-network</span>
      <span class="pi">-</span> <span class="s">dispatcher-network</span>
      <span class="pi">-</span> <span class="s">internal</span>
      <span class="pi">-</span> <span class="s">default</span>

  <span class="c1"># b -(https)-&gt; t(cert) -(http)-&gt; d -(http)-&gt; p</span>
  <span class="na">traefik</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">traefik</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">TZ=Australia/Sydney</span>
    <span class="na">security_opt</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">no-new-privileges:true</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s2">"</span><span class="s">always"</span>
    <span class="na">command</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--log.level=ERROR"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--accesslog=true"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--api.insecure=true"</span> <span class="c1"># Don't do that in production!</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--api.dashboard=true"</span> <span class="c1"># Don't do that in production!</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--providers.docker=true"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--providers.docker.exposedbydefault=false"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--global.sendAnonymousUsage=true"</span>


      <span class="c1"># Entrypoints for HTTP, HTTPS, and NX (TCP + UDP)</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--entrypoints.web.address=:80"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--entrypoints.websecure.address=:443"</span>

      <span class="c1"># Manual keys</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--providers.file.directory=/etc/traefik/dynamic_conf"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--providers.file.watch=true"</span>

    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">traefik.frontend.priority</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">traefik.enable</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">traefik.http.routers.dashboard.rule</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Host(`traefik.localhost`)</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">(PathPrefix(`/api`)</span><span class="nv"> </span><span class="s">||</span><span class="nv"> </span><span class="s">PathPrefix(`/dashboard`))"</span>
      <span class="na">traefik.http.routers.dashboard.entrypoints</span><span class="pi">:</span> <span class="s">websecure</span>
      <span class="na">traefik.http.routers.dashboard.tls</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">traefik.http.routers.dashboard.service</span><span class="pi">:</span> <span class="s">api@internal</span>

    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">80:80"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">443:443"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8080:8080"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">/var/run/docker.sock:/var/run/docker.sock:ro</span>
      <span class="c1"># Persist certificates, so we can restart as often as needed</span>
      <span class="pi">-</span> <span class="s">./services/traefik/certs:/letsencrypt</span>
      <span class="pi">-</span> <span class="s">./services/traefik/config/dynamic:/etc/traefik/dynamic_conf/conf.yml:ro</span>

    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="na">createcert</span><span class="pi">:</span>
        <span class="na">condition</span><span class="pi">:</span> <span class="s">service_completed_successfully</span>

    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">author-network</span>
      <span class="pi">-</span> <span class="s">publish-network</span>
      <span class="pi">-</span> <span class="s">dispatcher-network</span>
      <span class="pi">-</span> <span class="s">internal</span>
      <span class="pi">-</span> <span class="s">default</span>

  <span class="na">createcert</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">aemdesign/mkcert:latest</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">TZ=Australia/Sydney</span>
    <span class="na">command</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">test</span><span class="nv"> </span><span class="s">-f</span><span class="nv"> </span><span class="s">mkcert.key</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">exit</span><span class="nv"> </span><span class="s">0;</span><span class="nv"> </span><span class="s">mkcert</span><span class="nv"> </span><span class="s">-install</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">mkcert</span><span class="nv"> </span><span class="s">-key-file</span><span class="nv"> </span><span class="s">mkcert.key</span><span class="nv"> </span><span class="s">-cert-file</span><span class="nv"> </span><span class="s">mkcert.pem</span><span class="nv"> </span><span class="s">-client</span><span class="nv"> </span><span class="s">author.localhost</span><span class="nv"> </span><span class="s">publish.localhost</span><span class="nv"> </span><span class="s">dispatcher.localhost</span><span class="nv"> </span><span class="s">localhost</span><span class="nv"> </span><span class="s">127.0.0.1</span><span class="nv"> </span><span class="s">::1</span><span class="nv"> </span><span class="s">aem-local.peppermoney.com.au</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">openssl</span><span class="nv"> </span><span class="s">pkcs12</span><span class="nv"> </span><span class="s">-export</span><span class="nv"> </span><span class="s">-out</span><span class="nv"> </span><span class="s">mkcert.pfx</span><span class="nv"> </span><span class="s">-in</span><span class="nv"> </span><span class="s">mkcert.pem</span><span class="nv"> </span><span class="s">-inkey</span><span class="nv"> </span><span class="s">mkcert.key</span><span class="nv"> </span><span class="s">-certfile</span><span class="nv"> </span><span class="s">rootCA.pem</span><span class="nv"> </span><span class="s">-passout</span><span class="nv"> </span><span class="s">pass:123"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./services/traefik/certs:/certs</span>

<span class="na">networks</span><span class="pi">:</span>
  <span class="na">default</span><span class="pi">:</span>
  <span class="na">internal</span><span class="pi">:</span>
  <span class="na">author-network</span><span class="pi">:</span>
  <span class="na">publish-network</span><span class="pi">:</span>
  <span class="na">dispatcher-network</span><span class="pi">:</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">author-data</span><span class="pi">:</span>
  <span class="na">publish-data</span><span class="pi">:</span>
  <span class="na">dispatcher-data</span><span class="pi">:</span>
</code></pre></div></div>

<p>This will create the following containers:</p>

<ul>
  <li>author - author instance available on port 4502, <a href="http://author.localhost">http://author.localhost</a> and <a href="https://author.localhost">https://author.localhost</a></li>
  <li>publish - publish instance available on port 4503, <a href="http://publish.localhost">http://publish.localhost</a> and <a href="https://publish.localhost">https://publish.localhost</a></li>
  <li>dispatcher - dispatcher instance available on port 8081, <a href="http://dispatcher.localhost">http://dispatcher.localhost</a> and <a href="https://dispatcher.localhost">https://dispatcher.localhost</a></li>
  <li>traefik - traefik dashboard available on port 8080 and <a href="http://traefik.localhost:8080/dashboard/#/">http://traefik.localhost:8080/dashboard/#/</a></li>
  <li>createcert - creates the certificates for the traefik instance this provides all of the SSL certificates for the other containers</li>
</ul>

<p>Hope this helps.</p>

<h3 id="thank-you">Thank you</h3>

<p>I hope you enjoyed this guide. If you have any questions or comments, feel free to contact me. I will be happy to help.</p>

<p>Let me know what you think and don‚Äôt forget to tell your friends.</p>]]></content><author><name>Max Barrass</name><email>max@aem.design</email><uri>https://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="docker" /><category term="docker-compose" /><category term="wsl" /><category term="windows" /><summary type="html"><![CDATA[Test your AEM SaaS Dispatcher like a pro!]]></summary></entry><entry><title type="html">WebSight CMS Exclusive Preview</title><link href="https://aem.design/blog/2022/09/27/websight-cms-exclusive-preview" rel="alternate" type="text/html" title="WebSight CMS Exclusive Preview" /><published>2022-09-27T00:00:00+10:00</published><updated>2022-09-28T20:49:53+10:00</updated><id>https://aem.design/blog/2022/09/27/websight-cms-exclusive-preview</id><content type="html" xml:base="https://aem.design/blog/2022/09/27/websight-cms-exclusive-preview"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>It is always a pleasure to be part of something new and upcoming. So when I was invited to be part of an exclusive preview of a soon-to-be-released open source <a href="https://www.websight.io/">WebSight CMS</a>, I could not resist.</p>

<p><img src="/assets/images/websight/Login.png" alt="success" /></p>

<p>I‚Äôve been keeping an eye on new entrants to the Sling bases CMS for over a decade, and finally, <a href="https://www.websight.io/">WebSight CMS</a> has entered the space and bringing new capabilities to the table. Big shout out to the WebSight team and <a href="https://www.linkedin.com/in/michalcukierman/">Micha≈Ç Cukierman</a> for working on this for several years and bringing an open-source offering to the community. You can check out the GitHub repo for the community version at  <a href="https://github.com/websight-io/starter">https://github.com/websight-io/starter</a>.</p>

<style>
    .image-gallery {overflow: auto; margin-left: -1%!important;}
    .image-gallery li {float: left; display: block; margin: 0 0 1% 1%; width: 19%;}
    .image-gallery li a {text-align: center; text-decoration: none!important; color: #777;}
    .image-gallery li a span {display: block; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; padding: 3px 0;}
    .image-gallery li a img {width: 100%; display: block;}
</style>

<ul class="image-gallery">
    <li>
        <a href="/assets/images/websight/spaces/Spaces-Create-Properties.png" title="Spaces-Create-Properties"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/spaces/Spaces-Create-Properties.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Spaces-Create-Properties" title="Spaces-Create-Properties" /><span>Spaces-Create-Properties</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/spaces/Spaces-Create-Template.png" title="Spaces-Create-Template"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/spaces/Spaces-Create-Template.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Spaces-Create-Template" title="Spaces-Create-Template" /><span>Spaces-Create-Template</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/spaces/Spaces-Managment.png" title="Spaces-Managment"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/spaces/Spaces-Managment.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Spaces-Managment" title="Spaces-Managment" /><span>Spaces-Managment</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/spaces/Spaces.png" title="Spaces"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/spaces/Spaces.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Spaces" title="Spaces" /><span>Spaces</span></a>
    </li>

</ul>

<h2 id="capabilities">Capabilities</h2>

<p>These days the standard capabilities of CMS platforms are almost all but become feature complete. But there is still room for the cleanliness of experience and simplicity to be attained for the average author. This is where WebSight is making its play. Instead of going out and trying to reinvent how a great Enterprise CMS platform should not be built, it leverages the proven pattern that allows the team at WebSight to focus on Author experience and enterprise features that make a difference.</p>

<p>WebSight CMS has hit the ground running by leveraging the same stack as Adobe AEM, Apache Sling CMS and Peregrine CMS, to name a few. Leveraging technology is one thing, but WebSigh CMS‚Äôs team has the contenders covered in terms of author user experience.</p>

<p><img src="/assets/images/websight/page-editor/Page-Editor.png" alt="success" /></p>

<p>WebSigh CMS covers the following pillars Sling CMS users expect:
Spaces - for managing sites
Pages - author site hierarchy and edit pages
Assets - manage assets</p>

<style>
    .image-gallery {overflow: auto; margin-left: -1%!important;}
    .image-gallery li {float: left; display: block; margin: 0 0 1% 1%; width: 19%;}
    .image-gallery li a {text-align: center; text-decoration: none!important; color: #777;}
    .image-gallery li a span {display: block; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; padding: 3px 0;}
    .image-gallery li a img {width: 100%; display: block;}
</style>

<ul class="image-gallery">
    <li>
        <a href="/assets/images/websight/pages-and-assets/Assets.png" title="Assets"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/pages-and-assets/Assets.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Assets" title="Assets" /><span>Assets</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/pages-and-assets/Page-Actions-Page.png" title="Page-Actions-Page"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/pages-and-assets/Page-Actions-Page.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Page-Actions-Page" title="Page-Actions-Page" /><span>Page-Actions-Page</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/pages-and-assets/Page-Actions-Selection.png" title="Page-Actions-Selection"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/pages-and-assets/Page-Actions-Selection.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Page-Actions-Selection" title="Page-Actions-Selection" /><span>Page-Actions-Selection</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/pages-and-assets/Page-Metadata.png" title="Page-Metadata"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/pages-and-assets/Page-Metadata.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Page-Metadata" title="Page-Metadata" /><span>Page-Metadata</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/pages-and-assets/Page-Properties.png" title="Page-Properties"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/pages-and-assets/Page-Properties.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Page-Properties" title="Page-Properties" /><span>Page-Properties</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/pages-and-assets/Pages.png" title="Pages"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/pages-and-assets/Pages.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Pages" title="Pages" /><span>Pages</span></a>
    </li>

</ul>

<p>Additionally, there are several administrative functions that allow management of Content, Users and Groups, and other admin tools that allow performing administrative tasks to meet many needs:
Packages - manage packages (Package manager for AEM users)
Resource Browser (CRX/DE for AEM users)
User Management
Groovy Console - great OOTB addition allowing you to do just about anything in the backend.
Swagger Browser - amazing to see this as OOTB as it greatly streamlines any UI extension development, where you need to guess and reverse engineer this in other platforms.</p>

<style>
    .image-gallery {overflow: auto; margin-left: -1%!important;}
    .image-gallery li {float: left; display: block; margin: 0 0 1% 1%; width: 19%;}
    .image-gallery li a {text-align: center; text-decoration: none!important; color: #777;}
    .image-gallery li a span {display: block; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; padding: 3px 0;}
    .image-gallery li a img {width: 100%; display: block;}
</style>

<ul class="image-gallery">
    <li>
        <a href="/assets/images/websight/admin/Admin-Functions.png" title="Admin-Functions"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/Admin-Functions.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Admin-Functions" title="Admin-Functions" /><span>Admin-Functions</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/admin/Groovy-Console.png" title="Groovy-Console"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/Groovy-Console.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Groovy-Console" title="Groovy-Console" /><span>Groovy-Console</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/admin/Package-Manager-Package-Actions.png" title="Package-Manager-Package-Actions"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/Package-Manager-Package-Actions.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Package-Manager-Package-Actions" title="Package-Manager-Package-Actions" /><span>Package-Manager-Package-Actions</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/admin/Package-Manager-Package-Install-Dialog.png" title="Package-Manager-Package-Install-Dialog"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/Package-Manager-Package-Install-Dialog.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Package-Manager-Package-Install-Dialog" title="Package-Manager-Package-Install-Dialog" /><span>Package-Manager-Package-Install-Dialog</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/admin/Package-Manager-Package-Schedule-Actions.png" title="Package-Manager-Package-Schedule-Actions"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/Package-Manager-Package-Schedule-Actions.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Package-Manager-Package-Schedule-Actions" title="Package-Manager-Package-Schedule-Actions" /><span>Package-Manager-Package-Schedule-Actions</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/admin/Package-Manager-Package-Schedule.png" title="Package-Manager-Package-Schedule"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/Package-Manager-Package-Schedule.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Package-Manager-Package-Schedule" title="Package-Manager-Package-Schedule" /><span>Package-Manager-Package-Schedule</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/admin/Package-Manager.png" title="Package-Manager"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/Package-Manager.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Package-Manager" title="Package-Manager" /><span>Package-Manager</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/admin/Resource-Browser.png" title="Resource-Browser"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/Resource-Browser.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Resource-Browser" title="Resource-Browser" /><span>Resource-Browser</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/admin/Swagger-Browser-Execute.png" title="Swagger-Browser-Execute"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/Swagger-Browser-Execute.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Swagger-Browser-Execute" title="Swagger-Browser-Execute" /><span>Swagger-Browser-Execute</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/admin/Swagger-Browser.png" title="Swagger-Browser"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/Swagger-Browser.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Swagger-Browser" title="Swagger-Browser" /><span>Swagger-Browser</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/admin/User-Manager-User-Edit.png" title="User-Manager-User-Edit"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/User-Manager-User-Edit.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="User-Manager-User-Edit" title="User-Manager-User-Edit" /><span>User-Manager-User-Edit</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/admin/User-Manager.png" title="User-Manager"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/admin/User-Manager.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="User-Manager" title="User-Manager" /><span>User-Manager</span></a>
    </li>

</ul>

<h2 id="undercovers">Undercovers</h2>

<p>Undercovers WebSight CMS runs on Apache Sling stack but uses Mongo OOTB and a welcome NGINX replacement for Apache/Dispatcher combo. It‚Äôs fantastic to see a native docker setup; docker has been a must for any project for the last ten years, and it‚Äôs a great step towards adoption as it removes all barriers to getting started.</p>

<style>
    .image-gallery {overflow: auto; margin-left: -1%!important;}
    .image-gallery li {float: left; display: block; margin: 0 0 1% 1%; width: 19%;}
    .image-gallery li a {text-align: center; text-decoration: none!important; color: #777;}
    .image-gallery li a span {display: block; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; padding: 3px 0;}
    .image-gallery li a img {width: 100%; display: block;}
</style>

<ul class="image-gallery">
    <li>
        <a href="/assets/images/websight/undercovers/Felix-Console.png" title="Felix-Console"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/undercovers/Felix-Console.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Felix-Console" title="Felix-Console" /><span>Felix-Console</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/undercovers/UnderCovers.png" title="UnderCovers"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/undercovers/UnderCovers.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="UnderCovers" title="UnderCovers" /><span>UnderCovers</span></a>
    </li>

</ul>

<h2 id="page-authoring">Page Authoring</h2>

<p>As a deep AEM user, I deeply respect the inspiration from Adobe AEM experience with the number of authoring features that are a must for my authoring needs.</p>

<style>
    .image-gallery {overflow: auto; margin-left: -1%!important;}
    .image-gallery li {float: left; display: block; margin: 0 0 1% 1%; width: 19%;}
    .image-gallery li a {text-align: center; text-decoration: none!important; color: #777;}
    .image-gallery li a span {display: block; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; padding: 3px 0;}
    .image-gallery li a img {width: 100%; display: block;}
</style>

<ul class="image-gallery">
    <li>
        <a href="/assets/images/websight/page-editor/Page-Editor-Assets.png" title="Page-Editor-Assets"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/page-editor/Page-Editor-Assets.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Page-Editor-Assets" title="Page-Editor-Assets" /><span>Page-Editor-Assets</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/page-editor/Page-Editor-Component-Actions.png" title="Page-Editor-Component-Actions"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/page-editor/Page-Editor-Component-Actions.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Page-Editor-Component-Actions" title="Page-Editor-Component-Actions" /><span>Page-Editor-Component-Actions</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/page-editor/Page-Editor-Component-Dialog.png" title="Page-Editor-Component-Dialog"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/page-editor/Page-Editor-Component-Dialog.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Page-Editor-Component-Dialog" title="Page-Editor-Component-Dialog" /><span>Page-Editor-Component-Dialog</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/page-editor/Page-Editor-Content-Tree.png" title="Page-Editor-Content-Tree"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/page-editor/Page-Editor-Content-Tree.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Page-Editor-Content-Tree" title="Page-Editor-Content-Tree" /><span>Page-Editor-Content-Tree</span></a>
    </li>

    <li>
        <a href="/assets/images/websight/page-editor/Page-Editor.png" title="Page-Editor"><img src="https://images.weserv.nl/?url=aem.design/assets/images/websight/page-editor/Page-Editor.png&amp;w=300&amp;h=300&amp;output=png&amp;q=50&amp;t=square" alt="Page-Editor" title="Page-Editor" /><span>Page-Editor</span></a>
    </li>

</ul>

<p>In addition to inspiration, the team behind WebSight has added subtle improvements to the authoring experience. A nice touch to add grouping to the list of components breaks up what is usually a monotone list. Separating the components list into Layout and Components (I would have called this Content) is a great separation of concern and provides additional grouping for authoring logic.</p>

<p><img src="/assets/images/websight/page-editor/Page-Editor-Content-Tree.png" alt="success" /></p>

<h2 id="wishlist">Wishlist</h2>

<p>What‚Äôs missing in the open source preview version as of my review, and I am sure it will make it here eventually? This is more of a wishlist that would further round out the feature set:</p>

<ul>
  <li>Asset metadata - the ability to add metadata for Assets and author metadata dialog; developing this will enable this feature to be used in content fragments experiences as well.</li>
  <li>Content Fragments - this would provide a consistent way of managing data and could allow pages to be driven through content fragments. I have implemented this on AEM.</li>
  <li>ClientLibs - it‚Äôs a very, very underrated and underutilised capability, and it provides actual modularity that is yet to be attained in the FED world.</li>
</ul>

<p>These and everything else can be built on this already great package.</p>

<h2 id="conclusion">Conclusion</h2>

<p>WebSight CMS is a great new entrant with many opportunities; it‚Äôs great to see how Sling CMS can be leveraged for a great effect! So feel free to drop a star on their repos <a href="https://www.websight.io/">WebSight CMS</a> and shout it out on your favourite socials. Until next time!</p>]]></content><author><name>Max Barrass</name><email>max@aem.design</email><uri>https://maxbarrass.com</uri></author><category term="blog" /><category term="websight-cms" /><category term="docker" /><category term="docker-compose" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Setup Your Windows Devbox Like a Pro üíªüî©üîß</title><link href="https://aem.design/blog/2022/05/22/setup-your-windows-devbox-like-a-pro%F0%9F%92%BB%F0%9F%94%A9%F0%9F%94%A7" rel="alternate" type="text/html" title="Setup Your Windows Devbox Like a Pro üíªüî©üîß" /><published>2022-05-22T00:37:00+10:00</published><updated>2022-05-24T10:27:04+10:00</updated><id>https://aem.design/blog/2022/05/22/setup-your-windows-devbox-like-a-pro</id><content type="html" xml:base="https://aem.design/blog/2022/05/22/setup-your-windows-devbox-like-a-pro%F0%9F%92%BB%F0%9F%94%A9%F0%9F%94%A7"><![CDATA[<p>This article follows the previous one where we have cried our <a href="/blog/2022/02/01/goodbye-docker-desktop">Goodbyes to Docker Destop</a> üò≠.</p>

<p>Let‚Äôs now look at some base config you can start with when setting up you dev box for dev! Let us focus only on the base windows setup, which can be used as a foundation for any tooling specialisation.</p>

<p>If you are a developer, a frontend dev, backend dev, full stack or just want to know what should I have no my windows dev box as a starting point, then this article is for you.</p>

<p>For the best experience with Windows, before you begin experimenting and installing all sorts of tools, you are going to need some basics.</p>

<h3 id="get-some-soft">Get some soft!</h3>

<p>First off, you will need some proper tools to use on Windows for development. These should be at the top of your list.</p>

<ul>
  <li><a href="https://github.com/PowerShell/PowerShell/releases">Powershell Core 7</a> - This will give you a usable cross platform shell</li>
  <li><a href="https://github.com/microsoft/terminal/releases">Windows Terminal</a> - This will give you definitive terminal on windows</li>
  <li><a href="https://code.visualstudio.com/Download">Visual Studio Code</a> - Best IDE these days</li>
  <li><a href="https://www.jetbrains.com/idea/download/#section=windows">IntelliJ Community</a> - Best Java IDE these days</li>
  <li><a href="https://git-scm.com/download/win">Git for windows</a> - Latest git</li>
  <li><a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html">Oracle JDK 8</a> and <a href="https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html">Oracle JDK 8</a> - You can download both and install and switch using your paths or java config tool</li>
  <li><a href="https://maven.apache.org/download.cgi">Apache Maven</a> - Needed to compile maven projects</li>
  <li><a href="https://download.sublimetext.com/Sublime%20Text%20Build%203211%20x64%20Setup.exe">Sublime Text</a> - Will allow you to edit files quickly</li>
  <li><a href="https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe">Python</a> - Run python scripts</li>
  <li><a href="https://nodejs.org/dist/v18.2.0/node-v18.2.0-x64.msi">Node JS</a> - Run node js app</li>
</ul>

<p>If you cannot use Docker Desktop, you can just <a href="https://aem.design/blog/2022/02/01/goodbye-docker-desktop">setup Docker in WSL</a> and run it using your impressive <a href="https://github.com/microsoft/terminal/releases">Windows Terminal</a>!</p>

<p>Once you have these tools set up, you should be able to contribute to most code projects.</p>

<p>Before you run off and get busy with code, you need to verify and do some windows config updates, these are not so obvious, but you will encounter these at some point.</p>

<h2 id="enable-long-file-path-names-in-windows">Enable Long File Path Names in Windows</h2>

<p>Then you going to have to enable Windows Long file names.</p>

<ol>
  <li>Open up Windows Terminal as Administrator.</li>
  <li>Run the following command:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem" /v LongPathsEnabled /t REG_DWORD /d 0x1 /f
reg add "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Policies" /v LongPathsEnabled /t REG_DWORD /d 0x1 /f
</code></pre></div></div>

<ol>
  <li>Test if settings have been applied</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reg query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem"
reg query "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Policies"
</code></pre></div></div>

<h2 id="enable-long-file-path-names-in-git">Enable Long File Path Names in Git</h2>

<p>Now you are going to have to tell Git to use long file names, just in case it won‚Äôt do it by default.</p>

<ol>
  <li>Open up Windows Terminal as Administrator.</li>
  <li>Run the following command:
<code class="language-plaintext highlighter-rouge">git config --system core.longpaths true</code></li>
</ol>

<p>Now you can happily clone Linux/Unix repos that have very long paths!</p>

<h3 id="setup-environment-varibles">Setup Environment Varibles</h3>

<p>To get the best out of your shell, you need to set up some environment variables that will give you access to</p>

<ol>
  <li>Run <code class="language-plaintext highlighter-rouge">sysdm.cpl</code> as Administrator and on the Advanced tab, click <code class="language-plaintext highlighter-rouge">Environment Variables</code>.</li>
  <li>Add new Variable <code class="language-plaintext highlighter-rouge">JAVA_HOME</code> point to <code class="language-plaintext highlighter-rouge">C:\Program Files\Java\jdk1.8.0_301</code>.</li>
  <li>Add new Variable <code class="language-plaintext highlighter-rouge">M2_HOME</code> point to <code class="language-plaintext highlighter-rouge">C:\software\apache-maven-3.8.4</code> (where you installed maven)</li>
  <li>Under the <code class="language-plaintext highlighter-rouge">System Variables</code> select <code class="language-plaintext highlighter-rouge">Path</code> then click <code class="language-plaintext highlighter-rouge">Edit</code></li>
  <li>Under the <code class="language-plaintext highlighter-rouge">System Variables</code> click <code class="language-plaintext highlighter-rouge">New</code> and add the following:
    <ul>
      <li><strong>Variable name:</strong> JAVA_HOME</li>
      <li><strong>Variable value:</strong> C:\Program Files\Java\jdk1.8.0_301</li>
    </ul>
  </li>
  <li>Add the following new paths:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">%JAVA_HOME%\bin</code> this will allow you to run java</li>
      <li><code class="language-plaintext highlighter-rouge">%M2_HOME%\bin</code> this will allow you to run maven</li>
      <li><code class="language-plaintext highlighter-rouge">C:\Program Files\Git\usr\bin</code> this will allow you to run various Linux commands, <code class="language-plaintext highlighter-rouge">sed</code>, <code class="language-plaintext highlighter-rouge">awk</code>, <code class="language-plaintext highlighter-rouge">grep</code> etc</li>
    </ul>
  </li>
  <li>Click <code class="language-plaintext highlighter-rouge">Ok</code> to all the remaining dialogue boxes to save all the changes</li>
  <li>Verify java is installed by opening Windows Terminal and running <code class="language-plaintext highlighter-rouge">java -version</code> - you should see a Java JDK version if all went well</li>
</ol>

<p>After this, you should have the following paths in your command line path:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%M2_HOME%\bin
%JAVA_HOME%\bin
C:\Program Files\Git\usr\bin
</code></pre></div></div>

<h3 id="configure-docker">Configure Docker</h3>

<p>Create <code class="language-plaintext highlighter-rouge">.wslconfig</code> in <code class="language-plaintext highlighter-rouge">~/</code> with the following content.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[wsl2]
memory=6GB
</code></pre></div></div>

<p>This will ensure that WSL will not use up all of your resources. See more on <a href="https://docs.microsoft.com/en-us/windows/wsl/wsl-config">Advanced settings configuration in WSL</a>.</p>

<p>Once you reboot, your WSL should behave, and you will be able to use it with nice tools! Let me know what else you think should be on the list!</p>

<h3 id="thank-you">Thank you</h3>

<p>I hope you enjoyed this guide. If you have any questions or comments, feel free to contact me. I will be happy to help.</p>

<p>Let me know what you think and don‚Äôt forget to tell your friends.</p>]]></content><author><name>Max Barrass</name><email>max@aem.design</email><uri>https://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="docker" /><category term="docker-compose" /><category term="wsl" /><category term="windows" /><summary type="html"><![CDATA[Config and Tools for Windows that will help you !]]></summary></entry><entry><title type="html">Docker Compose and Deploy Stacks üçîüòò</title><link href="https://aem.design/blog/2022/02/08/docker-compose-and-deploy-stacks%F0%9F%8D%94%F0%9F%98%98" rel="alternate" type="text/html" title="Docker Compose and Deploy Stacks üçîüòò" /><published>2022-02-08T00:37:00+11:00</published><updated>2022-02-08T08:14:14+11:00</updated><id>https://aem.design/blog/2022/02/08/docker-compose</id><content type="html" xml:base="https://aem.design/blog/2022/02/08/docker-compose-and-deploy-stacks%F0%9F%8D%94%F0%9F%98%98"><![CDATA[<p>Following up on the articles <a href="/blog/2019/09/04/aem-and-docker">AEM and Docker</a>, <a href="/blog/2019/07/01/docker-containers-everywhere">Docker Containers Everywhere</a> and <a href="/blog/2019/08/30/docker-aem-bundle">Docker AEM Bundle</a>, lets pull all that knowledge together and talk about how to deploy AEM stacks to developers using Docker Compose. There are many ways to bring a stack to developers machines, but the simplest way is to use Docker Compose.</p>

<p>Additionally, when using Docker Compose, you will understand whether your deployment architecture is complex and which parts are critical; this will provide you with some feedback to clean things up.</p>

<h2 id="docker-compose-experience">Docker Compose Experience</h2>

<p>Docker Compose requires you to have one <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file in your project root. This file is a YAML file that describes the deployment of your stack. In simple scenarios, you can just have one file, and it will be enough; for most scenarios having a structure set up for growth is going to be beneficial long term. When a developer clones your repo all they need to do is to run <code class="language-plaintext highlighter-rouge">docker compose up</code>, and the stack will be deployed. Once it‚Äôs running, they open their browser and go to <code class="language-plaintext highlighter-rouge">http://localhost</code>, and they will land on stack console:</p>

<p><img src="/assets/images/docker/traefik-stack-console.png" alt="Traefik Stack Console" /></p>

<p>This simple console can be updated in any way required to convey context and provide any relevant information and links to developers working on the project. This is a straightforward way to surface a lot of documentation in a usable manner.</p>

<h2 id="docker-compose-stack-details">Docker Compose Stack Details</h2>

<p>Let‚Äôs take a deeper look at the details; here is an example of a simple deployment you can see the source here <a href="https://github.com/aem-design/aemdesign-aem-support/blob/master/docker-compose.yml">docker-compose.yml</a>. This docker compose file has the following services:</p>

<ul>
  <li>nginx - developer console, provides a developer-friendly console to visualise all of their services and provide shortcuts to all relevant consoles.</li>
  <li>createcert - a service that creates a self-signed certificate for the AEM instance.</li>
  <li>createcertpkcs12 - a service that creates a self-signed certificate that can be installed into the browser.</li>
  <li>traefik - a service that provides a reverse proxy to the AEM instance.</li>
  <li>seleniumhub - a service that provides a hub for selenium.</li>
  <li>selenium-node-chrome - a service that provides a selenium node for chrome.</li>
  <li>author - a primary author service.</li>
  <li>author-deploy-core - a service that deploys the AEM core to author instance.</li>
  <li>author-deploy-support - a service that deploys the AEM support to author instance.</li>
  <li>publish - a publish instance service.</li>
  <li>publish-deploy-core - a service that deploys the AEM core to publish instance.</li>
  <li>publish-deploy-support - a service that deploys the AEM support to publish instance.</li>
  <li>dispatcher - a dispatcher service.</li>
  <li>testing - this is meant to run when there is a aemdesign-parent repo, so when you are developing locally.</li>
  <li>automationtest - this meant to run in aemdesign-aem-support repo pipeline.</li>
  <li>automationtestprep - this meant to run in aemdesign-aem-support repo pipeline, will download the latest core and install local support packages.</li>
  <li>testingcheck - a service that check if test automation is working.</li>
</ul>

<p>These services can be activated all at once or individually, you can run <code class="language-plaintext highlighter-rouge">docker compose up traekfik nginx</code> to get only the developer console on <code class="language-plaintext highlighter-rouge">http://localhost</code>. Some of the services have dependencies on others, so you can see the order in which they are activated. Some services are optional and can be activated when required using profile activation <code class="language-plaintext highlighter-rouge">docker compose up -p dodeploy author-deploy-core</code>.</p>

<p>This example I‚Äôve provided uses the older <code class="language-plaintext highlighter-rouge">2.4</code> version of docker compose that supports the <code class="language-plaintext highlighter-rouge">EXTENDS</code> keyword:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">extends</span><span class="pi">:</span>
  <span class="na">file</span><span class="pi">:</span> <span class="s">./docker/aem/docker-compose.yml</span>
  <span class="na">service</span><span class="pi">:</span> <span class="s">author-deploy-support</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">EXTENDS</code> keyword allows you to pull together predefined docker compose files from a better-organised structure.</p>

<p>Having a well-organised docker folder with a subfolder for all services will ensure that you can have a single file that can be used to deploy all of your services. This also allows you to have all of the relevant per service configurations isolated and not mixed in the same file. Here is an example structure of a docker folder, <a href="https://github.com/aem-design/aemdesign-aem-support/tree/master/docker">source is here</a>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker
‚îú‚îÄ‚îÄ aem
‚îÇ   ‚îî‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ common
‚îÇ   ‚îú‚îÄ‚îÄ config-tz.yml
‚îú‚îÄ‚îÄ nginx
‚îÇ   ‚îî‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ selenium
‚îÇ   ‚îî‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ testing
‚îÇ   ‚îú‚îÄ‚îÄ docker-compose.yml
‚îî‚îÄ‚îÄ traefik
    ‚îî‚îÄ‚îÄ docker-compose.yml
</code></pre></div></div>

<p>If you check out the <a href="https://github.com/aem-design/aemdesign-aem-support/tree/master/docker">github link</a> you will find a number of relevant config files in each service folder. Furthermore, as you add new services, it will be easy to follow this pattern to keep things neat and tidy.</p>

<p>In later versions of docker compose, see <a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">compose-file-v3</a>, you can‚Äôt use <code class="language-plaintext highlighter-rouge">EXTENDS</code> keyword and you need to pass all of the required service <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> files when running <code class="language-plaintext highlighter-rouge">docker compose up</code> command. This can be simply abstracted into a start script here is an example of how to do it <a href="https://github.com/wildone/synology-docker/blob/main/start.ps1">start.ps1</a>. This is a PowerShell script that will run <code class="language-plaintext highlighter-rouge">docker compose up</code> command for all services activated from <code class="language-plaintext highlighter-rouge">start-services.conf</code> file. In addition, that script leverages <code class="language-plaintext highlighter-rouge">.env</code> file to keep all of your environment variables in one place for easy maintenance, see example <a href="https://github.com/wildone/synology-docker/blob/main/.env">.env</a> file. You can read more about <a href="https://github.com/wildone/synology-docker/blob/main/.env">environment files</a> on official docs.</p>

<h3 id="thank-you">Thank you</h3>

<p>I hope you will find using docker compose will being a smile to your face {insert home alone 2 smile}. As always if you have any questions or comments, feel free to contact me. I will be happy to help.</p>

<p>Let me know what you think and don‚Äôt forget to tell your friends.</p>]]></content><author><name>Max Barrass</name><email>max@aem.design</email><uri>https://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="docker" /><category term="automation" /><category term="docker-compose" /><summary type="html"><![CDATA[How to use docker compose like a pro!]]></summary></entry><entry><title type="html">Goodbye Centos</title><link href="https://aem.design/blog/2022/02/06/goodbye-centos" rel="alternate" type="text/html" title="Goodbye Centos" /><published>2022-02-06T00:00:00+11:00</published><updated>2022-02-07T00:37:32+11:00</updated><id>https://aem.design/blog/2022/02/06/goodbye-centos</id><content type="html" xml:base="https://aem.design/blog/2022/02/06/goodbye-centos"><![CDATA[<p>Centos is no more! You already know that. The founder of Kurtzer, who started Centos more than 16 years ago, was shocked just as much. Centos was a great gap filler between Fedora and RHEL. You had the best of both worlds, but you could use it for development and then roll your apps straight to RHEL if you need enterprise support.</p>

<p>What does this mean for AEM? Well, it means all of the containers essentially will need to be updated to use something else. You can‚Äôt use Centos, so the next best thing would be ‚Ä¶ Debian. Yes, Ubuntu is a good contender, but you won‚Äôt be able to run AEM Forms on it; tldr, Ubuntu does not have 32bit support.</p>

<p>Old containers will keep working, but slowly, all new updates would need to be rolled on the new Debian images that are available right now. Go ahead check them to see what you think. You can also check out the <a href="https://hub.docker.com/u/aemdesign/">AEM.Design Docker Hub</a> for the latest images.</p>

<p>Here, for example, the latest AEM 6.5 with SP 11:</p>

<div class="code-copy-header">
  <button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span><span class="w"> </span><span class="nx">run</span><span class="w"> </span><span class="nt">--name</span><span class="w"> </span><span class="nx">author6511</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"TZ=Australia/Sydney"</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"AEM_RUNMODE=-Dsling.run.modes=author,crx3,crx3tar,forms,localdev"</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"AEM_JVM_OPTS=-server -Xms248m -Xmx1524m -XX:MaxDirectMemorySize=256M -XX:+CMSClassUnloadingEnabled -Djava.awt.headless=true -Dorg.apache.felix.http.host=0.0.0.0 -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=58242,suspend=n -XX:+UseParallelGC --add-opens=java.desktop/com.sun.imageio.plugins.jpeg=ALL-UNNAMED --add-opens=java.base/sun.net.www.protocol.jrt=ALL-UNNAMED --add-opens=java.naming/javax.naming.spi=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xerces.internal.dom=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED -Dnashorn.args=--no-deprecation-warning"</span><span class="w"> </span><span class="nt">-p4502</span><span class="p">:</span><span class="nx">8080</span><span class="w"> </span><span class="nt">-p30303</span><span class="p">:</span><span class="nx">58242</span><span class="w"> </span><span class="nt">-d</span><span class="w"> </span><span class="nx">aemdesign/aem:6.5.11.0-jdk11</span><span class="w">
</span></code></pre></div></div>

<p>And as an extra bonus, if you prefer to use this on your M1 Mac, here is the same command again with the ARM suffix in the tag:</p>

<div class="code-copy-header">
  <button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span><span class="w"> </span><span class="nx">run</span><span class="w"> </span><span class="nt">--name</span><span class="w"> </span><span class="nx">author6511</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"TZ=Australia/Sydney"</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"AEM_RUNMODE=-Dsling.run.modes=author,crx3,crx3tar,forms,localdev"</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"AEM_JVM_OPTS=-server -Xms248m -Xmx1524m -XX:MaxDirectMemorySize=256M -XX:+CMSClassUnloadingEnabled -Djava.awt.headless=true -Dorg.apache.felix.http.host=0.0.0.0 -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=58242,suspend=n -XX:+UseParallelGC --add-opens=java.desktop/com.sun.imageio.plugins.jpeg=ALL-UNNAMED --add-opens=java.base/sun.net.www.protocol.jrt=ALL-UNNAMED --add-opens=java.naming/javax.naming.spi=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xerces.internal.dom=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED -Dnashorn.args=--no-deprecation-warning"</span><span class="w"> </span><span class="nt">-p4502</span><span class="p">:</span><span class="nx">8080</span><span class="w"> </span><span class="nt">-p30303</span><span class="p">:</span><span class="nx">58242</span><span class="w"> </span><span class="nt">-d</span><span class="w"> </span><span class="nx">aemdesign/aem:6.5.11.0-jdk11-arm</span><span class="w">
</span></code></pre></div></div>

<h3 id="thank-you">Thank you</h3>

<p>I hope you will find the new ARM images useful. If you have any questions or comments, feel free to contact me. I will be happy to help.</p>

<p>Let me know what you think and don‚Äôt forget to tell your friends.</p>]]></content><author><name>Max Barrass</name><email>max@aem.design</email><uri>https://maxbarrass.com</uri></author><category term="blog" /><category term="centos" /><summary type="html"><![CDATA[You were great while the free ride lasted!]]></summary></entry><entry><title type="html">Goodbye Docker Desktop</title><link href="https://aem.design/blog/2022/02/01/goodbye-docker-desktop" rel="alternate" type="text/html" title="Goodbye Docker Desktop" /><published>2022-02-01T00:00:00+11:00</published><updated>2022-06-07T01:51:05+10:00</updated><id>https://aem.design/blog/2022/02/01/goodbye-docker-desktop</id><content type="html" xml:base="https://aem.design/blog/2022/02/01/goodbye-docker-desktop"><![CDATA[<p>First of all, if it wasn‚Äôt for docker, the technology landscape would be very different today. Thank you, docker and the team behind it! I do feel that some technologies that come out as open-source and force other vendors to show their cards. Docker single-handled changed the way a lot of things are done in software development; this is probably an understatement, as it is amazing! I feel that the docker team is doing a great job and I hope this will continue.</p>

<p>But as you all know, docker desktop WAS a great tool for running docker on your desktop, up until it became a thing of the past. It drove itself off the cliff with paid subscription. Most corporate companies will think long and hard before purchasing docker desktop licences. So if you can‚Äôt use it at work, why would you use it at home? After all, you are what you practice, and you are what you use. Consistency of tools is critical to developers.</p>

<p>There are many alternatives to the docker desktop stack, but let‚Äôs not throw docker simplicity out the window yet. Obviously, Kube and Helm is the destination, but let‚Äôs take small steps. For DevOps, using git with docker-compose gives you all the power of git and docker. Yes team behind Docker Desktop have added a lot of front end features to it, and maybe there is a use case for them, but in a pipeline driven world, you can‚Äôt use them. You don‚Äôt use docker desktop in production so keeping rest of the stack the same would be a good idea.</p>

<p>So this brings this journey to a crossroads. Do you build a VM and run the docker engine and docker-compose in there, or do you run this semi-natively? If you are on Linux/Unix you are alright; you can google your way out. On windows, however best experience would be attained through Powershell Core7, WSL2 and Windows Terminal. Go ahead try these on; you will never look back! Also, while you are at it, stop using CYGWIN to do this; you are making your life harder than you have to. :P</p>

<p>Now that you have tools from the future installed, lets proceed to the next steps</p>

<h2 id="wsl-install-ubuntu">WSL Install Ubuntu</h2>

<p>This is a ubuntu guide, same as Docker Desktop, Centos ecosystem is dead, so using Ubuntu is the best option we have. (long story post to follow).</p>

<h3 id="wsl-download-and-import-ubuntu">Wsl download and Import ubuntu</h3>

<p>Open up Powershell core and run the following commands.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
wsl.exe --set-default-version 2


dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
wsl --install --distribution Ubuntu
wsl --install --distribution Debian
</code></pre></div></div>

<p>Now you have a ubuntu image in your WSL, you can restart Windows Terminal, and it will appear as a new option.</p>

<h3 id="config-ubuntu">Config Ubuntu</h3>

<p>Because we did not use MS apx, the new Ubuntu has only a root user; best approach is to add a new user to your liking. Run the new ubuntu terminal in Windows Terminal, and in it run the following commands. (Change user name and password as you like when prompted.)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adduser <span class="nt">-d</span> /home/maxbarrass <span class="nt">-m</span> maxbarrass
passwd maxbarrass
addgroup maxbarrass <span class="nb">sudo
</span>usermod <span class="nt">-aG</span> <span class="nb">sudo </span>maxbarrass
<span class="nb">echo echo</span> <span class="s2">"</span><span class="nv">$USER</span><span class="s2"> ALL=(ALL) NOPASSWD:ALL"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/apt/sources.list
</code></pre></div></div>

<h3 id="update-windows-terminal-profile">Update Windows Terminal Profile</h3>

<p>Now that you have a new user in your Ubuntu, you can update your Windows Terminal profile to use the new user.</p>

<p>This should be in the Command line for your ubuntu profile:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wsl.exe -d ubuntu -u maxbarrass
</code></pre></div></div>

<h3 id="install-docker-in-ubuntu">Install docker in Ubuntu</h3>

<p>You can run this in your Ubuntu terminal:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/aem-design/aem.design/master/assets/scripts/install-docker-wsl.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<p>Or create a new script <code class="language-plaintext highlighter-rouge">nano install-docker.sh</code> with the following content and run it <code class="language-plaintext highlighter-rouge">sudo ./install-docker.sh ${USER}</code>. This will install docker and docker-compose, as well as add docker service start to your <code class="language-plaintext highlighter-rouge">.profile</code>. This way, when you open your Ubuntu, it will ensure that docker is running.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c">#allow your account to sudo without password</span>
<span class="nb">echo echo</span> <span class="s2">"</span><span class="nv">$USER</span><span class="s2"> ALL=(ALL) NOPASSWD:ALL"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/sudoers

<span class="c"># update the package manager and install some prerequisites (all of these aren't technically required)</span>
<span class="nb">sudo </span>apt-get update <span class="nt">-y</span>
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> apt-transport-https ca-certificates curl software-properties-common libssl-dev libffi-dev git wget nano

<span class="c"># create a group named docker and add yourself to it</span>
<span class="c">#   so that we don't have to type sudo docker every time</span>
<span class="c">#   note you will need to logout and login before this takes affect (which we do later)</span>
<span class="nb">sudo </span>groupadd docker
<span class="nb">sudo </span>usermod <span class="nt">-aG</span> docker <span class="nv">$USER</span>

<span class="c"># add Docker key and repo</span>
curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class="nb">sudo </span>apt-key add -
<span class="nb">sudo </span>add-apt-repository <span class="s2">"deb [arch=amd64] https://download.docker.com/linux/ubuntu </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> stable"</span> <span class="nt">-y</span>

<span class="c"># add kubectl key and repo</span>
curl <span class="nt">-s</span> https://packages.cloud.google.com/apt/doc/apt-key.gpg | <span class="nb">sudo </span>apt-key add -
<span class="nb">echo</span> <span class="s2">"deb https://apt.kubernetes.io/ kubernetes-xenial main"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/kubernetes.list

<span class="c"># update the package manager with the new repos</span>
<span class="nb">sudo </span>apt-get update

<span class="c"># upgrade the distro</span>
<span class="nb">sudo </span>apt-get upgrade <span class="nt">-y</span>
<span class="nb">sudo </span>apt-get autoremove <span class="nt">-y</span>

<span class="c"># install docker</span>
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> docker-ce containerd.io

<span class="c"># install kubectl</span>
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> kubectl

<span class="c"># install latest version of docker compose</span>
<span class="nb">sudo </span>curl <span class="nt">-sSL</span> https://github.com/docker/compose/releases/download/v<span class="sb">`</span>curl <span class="nt">-s</span> https://github.com/docker/compose/tags | <span class="nb">grep</span> <span class="s2">"compose/releases/tag"</span> | <span class="nb">sed</span> <span class="nt">-r</span> <span class="s1">'s|.*([0-9]+\.[0-9]+\.[0-9]+).*|\1|p'</span> | <span class="nb">head</span> <span class="nt">-n</span> 1<span class="sb">`</span>/docker-compose-<span class="sb">`</span><span class="nb">uname</span> <span class="nt">-s</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="sb">`</span>-<span class="sb">`</span><span class="nb">uname</span> <span class="nt">-m</span><span class="sb">`</span> <span class="nt">-o</span> /usr/local/bin/docker-compose
<span class="nb">sudo chmod</span> +x /usr/local/bin/docker-compose

<span class="c"># ensure docker does not use iptabels</span>
<span class="nb">sudo touch</span> /etc/docker/daemon.json
<span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/docker/daemon.json <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
{
  "iptables": false
}
</span><span class="no">EOF

</span><span class="c"># auto start docker on boot</span>
<span class="nb">echo</span> <span class="s2">"Starting docker service"</span>
<span class="nb">echo</span> <span class="s2">"sudo service docker start"</span> <span class="o">&gt;&gt;</span> ~/.profile

<span class="c"># mount host drives to root /c/ etc.</span>
<span class="nb">sudo touch</span> /etc/wsl.conf
<span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/wsl.conf <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
[automount]
root = /
options = "metadata"
</span><span class="no">EOF

</span></code></pre></div></div>

<p>Reboot, open windows terminal and open bash prompt. You should be prompted for password to start docker. After that you can run <code class="language-plaintext highlighter-rouge">docker ps</code> to see if docker is running.</p>

<h3 id="thank-you">Thank you</h3>

<p>I hope you enjoyed this guide. If you have any questions or comments, feel free to contact me. I will be happy to help.</p>

<p>Let me know what you think and don‚Äôt forget to tell your friends.</p>]]></content><author><name>Max Barrass</name><email>max@aem.design</email><uri>https://maxbarrass.com</uri></author><category term="blog" /><category term="docker-desktop" /><summary type="html"><![CDATA[You were great while you lasted!]]></summary></entry><entry><title type="html">How to add property and author a component programmatically?</title><link href="https://aem.design/blog/2022/01/19/how-to-add-property-and-author-a-component-programmatically" rel="alternate" type="text/html" title="How to add property and author a component programmatically?" /><published>2022-01-19T00:00:00+11:00</published><updated>2022-01-19T14:03:53+11:00</updated><id>https://aem.design/blog/2022/01/19/how-to-add-property-and-author-a-component-programmatically</id><content type="html" xml:base="https://aem.design/blog/2022/01/19/how-to-add-property-and-author-a-component-programmatically"><![CDATA[<h2 id="updatating-aem-content-programmatically">Updatating AEM Content programmatically?</h2>

<p>By far the easiest method of updating your AEM content programmatically is to use <a href="https://adobe-consulting-services.github.io/acs-aem-commons/features/on-deploy-scripts/index.html">ACS On-Deploy Script</a></p>

<p>To do this you will need these java files</p>
<ul>
  <li><a href="#1-ondeployscriptproviderimpljava">OnDeployScriptProviderImpl.java</a> - which will load your Script <code class="language-plaintext highlighter-rouge">UpdateNodeAttibutes</code>, read more about this in the docs.</li>
  <li><a href="#2-updatenodeattibutesjava">UpdateNodeAttibutes.java</a> - which will update your data..</li>
</ul>

<p>Here is starting content for your files‚Ä¶</p>

<h3 id="1-ondeployscriptproviderimpljava">1. OnDeployScriptProviderImpl.java</h3>

<p>Location: <code class="language-plaintext highlighter-rouge">design\aem\ondeploy\OnDeployScriptProviderImpl.java</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">design.aem.ondeploy</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.adobe.acs.commons.ondeploy.OnDeployScriptProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.adobe.acs.commons.ondeploy.scripts.OnDeployScript</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">design.aem.ondeploy.scripts.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.felix.scr.annotations.Properties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.felix.scr.annotations.Property</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.felix.scr.annotations.Service</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.osgi.service.component.annotations.Component</span><span class="o">;</span>

<span class="nd">@Component</span><span class="o">(</span><span class="n">immediate</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="nd">@Service</span>
<span class="nd">@Properties</span><span class="o">({</span>
        <span class="nd">@Property</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"service.description"</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">"Developer service that identifies code scripts to execute upon deployment"</span><span class="o">)</span>
<span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OnDeployScriptProviderImpl</span> <span class="kd">implements</span> <span class="nc">OnDeployScriptProvider</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OnDeployScript</span><span class="o">&gt;</span> <span class="nf">getScripts</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
            <span class="k">new</span> <span class="nf">UpdateNodeAttibutes</span><span class="o">()</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="2-updatenodeattibutesjava">2. UpdateNodeAttibutes.java</h3>

<p>Location: <code class="language-plaintext highlighter-rouge">design\aem\ondeploy\scripts\UpdateNodeAttibutes.java</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">design.aem.ondeploy.scripts</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.adobe.acs.commons.ondeploy.scripts.OnDeployScript</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.adobe.acs.commons.ondeploy.scripts.OnDeployScriptBase</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.day.cq.search.PredicateGroup</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.day.cq.search.Query</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.day.cq.search.QueryBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.day.cq.search.result.Hit</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.day.cq.search.result.SearchResult</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.day.cq.wcm.api.Page</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.jcr.Node</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.jcr.RepositoryException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.jcr.Session</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.commons.lang3.StringUtils</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.sling.api.resource.ModifiableValueMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.sling.api.resource.Resource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.sling.api.resource.ResourceResolver</span><span class="o">;</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UpdateNodeAttibutes</span> <span class="kd">extends</span> <span class="nc">OnDeployScriptBase</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">CONTENT_ROOT_PATH</span> <span class="o">=</span> <span class="s">"/content/"</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="no">RENAME_ATTRIBUTES</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;()</span> <span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="no">ADD_ATTRIBUTES</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;()</span> <span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>

        <span class="nc">QueryBuilder</span> <span class="n">queryBuilder</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getResourceResolver</span><span class="o">().</span><span class="na">adaptTo</span><span class="o">(</span><span class="nc">QueryBuilder</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="c1">// predicates for properties we are looking for.</span>
        <span class="c1">// more info on how to make these https://github.com/paulrohrbeck/aem-links/blob/master/querybuilder_cheatsheet.md</span>
        <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">param</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

        <span class="n">param</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"path"</span><span class="o">,</span> <span class="no">CONTENT_ROOT_PATH</span><span class="o">);</span>
        <span class="n">param</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"p.limit"</span><span class="o">,</span> <span class="s">"-1"</span><span class="o">);</span>

        <span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="no">RENAME_ATTRIBUTES</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>

            <span class="n">param</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"group."</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"_property"</span><span class="o">,</span> <span class="s">"@"</span> <span class="o">+</span> <span class="n">key</span><span class="o">);</span>
            <span class="n">param</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"group."</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"_property.value"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
            <span class="n">param</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"group."</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"_property.operation"</span><span class="o">,</span> <span class="s">"exists"</span><span class="o">);</span>
            <span class="n">i</span><span class="o">++;</span>

        <span class="o">}</span>

        <span class="n">param</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"group.p.or"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>

        <span class="c1">// this will return a list of all pages that have any of properties we need</span>
        <span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="n">queryBuilder</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span>
                <span class="nc">PredicateGroup</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">param</span><span class="o">),</span>
                <span class="k">this</span><span class="o">.</span><span class="na">getResourceResolver</span><span class="o">().</span><span class="na">adaptTo</span><span class="o">(</span><span class="nc">Session</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
        <span class="o">);</span>

        <span class="nc">SearchResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>

        <span class="kt">boolean</span> <span class="n">migrationError</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

        <span class="c1">// walk the query result</span>
        <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="nc">Hit</span> <span class="n">hit</span> <span class="o">:</span> <span class="n">result</span><span class="o">.</span><span class="na">getHits</span><span class="o">())</span> <span class="o">{</span>

            <span class="nc">Resource</span> <span class="n">resultResource</span> <span class="o">=</span> <span class="n">hit</span><span class="o">.</span><span class="na">getResource</span><span class="o">();</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">resultResource</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>

                <span class="nc">ModifiableValueMap</span> <span class="n">resourceProps</span> <span class="o">=</span> <span class="n">resultResource</span><span class="o">.</span><span class="na">adaptTo</span><span class="o">(</span><span class="nc">ModifiableValueMap</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

                <span class="k">try</span> <span class="o">{</span>
                    <span class="c1">// walk though all nodes that need to be renamed</span>
                    <span class="k">for</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="no">RENAME_ATTRIBUTES</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
                        <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
                        <span class="nc">String</span> <span class="n">newKey</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>

                        <span class="c1">// if node map contains attribute create a new entry.</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">resourceProps</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
                            <span class="c1">// add value with new key</span>
                            <span class="n">resourceProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">newKey</span><span class="o">,</span><span class="n">resourceProps</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
                            <span class="c1">// remove old key and value</span>
                            <span class="n">resourceProps</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
                        <span class="o">}</span>
                    
                    <span class="o">}</span>
                    
                    <span class="k">for</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="no">ADD_ATTRIBUTES</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
                        <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
                        <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>

                        <span class="c1">// if node map contains attribute create a new entry.</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">resourceProps</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
                            <span class="c1">// add new key and value</span>
                            <span class="n">resourceProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span><span class="n">value</span><span class="o">);</span>
                        <span class="o">}</span>
                    
                    <span class="o">}</span>

                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">migrationError</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> 
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"Could not complete migration."</span><span class="o">);</span>
                <span class="o">}</span>

                
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(!</span><span class="n">migrationError</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">save</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>Update <code class="language-plaintext highlighter-rouge">RENAME_ATTRIBUTES</code> and <code class="language-plaintext highlighter-rouge">ADD_ATTRIBUTES</code> maps for desired oucome, good luck and have fun!</p>

<h3 id="thank-you">Thank you</h3>

<p>If you would like to contribute or fork the code, you can get it on GitHub <a href="https://github.com/aem-design">https://github.com/aem-design</a> and through Maven central.</p>

<p>Don‚Äôt forget to tell your friends.</p>]]></content><author><name>Max Barrass</name><email>max@aem.design</email><uri>https://maxbarrass.com</uri></author><category term="blog" /><category term="aem" /><category term="ondeploy" /><category term="acs" /><category term="data" /><category term="patterns" /><summary type="html"><![CDATA[ACS On-Deploy is the answer!]]></summary></entry><entry><title type="html">SPA, Headless, Widgets and AEM?</title><link href="https://aem.design/blog/2021/09/10/spa-headless-widgets-and-aem" rel="alternate" type="text/html" title="SPA, Headless, Widgets and AEM?" /><published>2021-09-10T00:00:00+10:00</published><updated>2021-09-10T17:35:40+10:00</updated><id>https://aem.design/blog/2021/09/10/spa-widgets-and-aem</id><content type="html" xml:base="https://aem.design/blog/2021/09/10/spa-headless-widgets-and-aem"><![CDATA[<p>There are many ways to build the web; most of the ways can be implemented in AEM, which one works best is going to depend on your authors. What the authors are willing to author, how involved do they get with content, and how involved do they want to get with crafting experiences? Once you answer, these questions the solution will pop out. The following should provide an overview of available options and arm you with information to make a choice.</p>

<h2 id="spa-headless-add-widgets-patterns-in-aem">SPA, Headless add Widgets patterns in AEM</h2>

<p>Before we starte here is a context of each term</p>

<p>SPA - single page application an alternative to a multi-page website.
SPA Editor - AEM native editor for SPA‚Äôs
Headless - a pattern where you leverage API or GrapgQL to get data from server
Widget - a component of a web page with clientside experience, it has basic HTML, and javascript turns into the interactive experience when loaded.</p>

<p>Now we can extrapolate these in relation to AEM. Here is a summary of patterns of implementing single-page and multi-page experience in AEM. In a lot of AEM implementations, you will find that all of these methods would have been utilised over time.</p>

<p>SPA - is a standalone application hosted externally to AEM, managed by developers, potential config by authors through content; can be headless.
SPA in a Page - provides a method of host SPA application in a page, giving the ability to place SPA‚Äôs in different parts of the site; developer-focused, SPA has a dedicated component with possible authoring inputs; can be headless.
SPA Editor - native ability to create SPA‚Äôs in AEM, allow full authoring of application; native components; can be headless.
Page - a native way to create multi-page experiences, allow full authoring of pages, full content reuse and ability to use any components needed; a primary way of creating content for the web.
Widgets in Page - small targeted components that are added to pages to create experiences; provides a way to create rich experiences that could be hard to author; can be headless.</p>

<p>Here is this information in a table.</p>

<table>
  <thead>
    <tr>
      <th>¬†</th>
      <th style="text-align: center">¬†</th>
      <th style="text-align: center">Hosting</th>
      <th style="text-align: center">¬†</th>
      <th style="text-align: center">Page Experience</th>
      <th style="text-align: center">¬†</th>
      <th style="text-align: center">Focus</th>
      <th style="text-align: center">¬†</th>
      <th style="text-align: center">Content Usage</th>
      <th style="text-align: center">¬†</th>
      <th style="text-align: center">¬†</th>
      <th style="text-align: center">¬†</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Pattern</td>
      <td style="text-align: center">Headless</td>
      <td style="text-align: center">External</td>
      <td style="text-align: center">Internal</td>
      <td style="text-align: center">Single Page</td>
      <td style="text-align: center">Multi-Page</td>
      <td style="text-align: center">Authoring</td>
      <td style="text-align: center">Developer</td>
      <td style="text-align: center">API</td>
      <td style="text-align: center">Page</td>
      <td style="text-align: center">Tags</td>
      <td style="text-align: center">Assets</td>
    </tr>
    <tr>
      <td>SPA</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
    </tr>
    <tr>
      <td>SPA in Page</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
    </tr>
    <tr>
      <td>SPA Editor</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
    </tr>
    <tr>
      <td>Page</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
    </tr>
    <tr>
      <td>Widget in Page</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
      <td style="text-align: center">x</td>
    </tr>
  </tbody>
</table>

<p>Adding a Design Language System into the mix would also add another level of complexity as SPA, and native Web will have different Design Language primarily because native AEM components can have Styles applied to them by authors, and SPA would have a more focused and controlled set of settings.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Focussing on AEM Authoring experience will always be beneficial as it will allow more people to help to grow experience. Having more eyes and hands helping to build the experience is always a good thing.</p>

<p>If you are must have a developer-centric experience and use AEM as a content repository, you can do it but you will be missing out on a lot of benefits that you would need to invent from sratch.</p>

<p>Using AEM SPA Editor will allow opening your experience building to authors so that they can help in any way they can. If you just have developers doing the authoring, then you will also missout on valuable input, and chances are you will rever to the vanila SPA pattern.</p>

<p>Going down the Widgets in a Page will give you the biggest impact as you can leverage all of the content authoring patterns and content services available in AEM. This will allow you to integrate widgets into existing pages, allow you to target them easily and importantly, all of this will be done by authors.</p>

<p>Obviously, all other patterns can be developed to the same level of maturity given appropriate time and effort.</p>

<h2 id="background">Background</h2>

<p>Here is the background information on building blocks that are used in SPA patterns.</p>

<h3 id="web-experiences">Web Experiences</h3>

<p>There are many ways to make great experiences for the web. In the end HTML and CSS is what all experiences are made of and its the details of how the developers choose to implement those experiences that varries. Traditional methods of we dev are either plain HTML pages or Single Page Application‚Äôs (SPA‚Äôs).</p>

<p>Plain HTML approach means that you develop multi-page experiences where a user is navigating a network of related pages. It‚Äôs a long term play, and you leverage a lot of technical and taxonomy tools to help you to play this out over a long period of time.</p>

<p><img src="/assets/diagrams/01-aem-spa-plain-web.png" alt="Plain Web" /></p>

<p>Single Page Applications or SPA‚Äôs is another approach that focuses all of the experiences into one page. This means that user does not navigate pages as such, they are confined to one page, and they navigate experience as its laid-out by the SPA, SPA uses traditional API‚Äôs or GraphQL to gather content it needs.</p>

<p><img src="/assets/diagrams/03-aem-spa-api-client-side.png" alt="SPA API" /></p>

<h3 id="aem-native-apis">AEM native API‚Äôs</h3>

<p>AEM technical strength is in the flexibility of content, content architecture and ability to render content in place in different ways. You can store content in AEM in anyway you want, structure it to make logical sense and retrieve it either with native API, GraphQL or custom API you need.</p>

<p>In AEM, you can store some content into a location <code class="language-plaintext highlighter-rouge">/content/page</code> then request its HTML representation <code class="language-plaintext highlighter-rouge">/content/page.html</code>, then request its XML representation <code class="language-plaintext highlighter-rouge">/content/page.xml</code>, then request its JSON representation <code class="language-plaintext highlighter-rouge">/content/page.tidy.5.json</code>, then request its Image representation <code class="language-plaintext highlighter-rouge">/content/page.thumbnail.png</code> and on and on.</p>

<p>AEM has a method for adding these renderers (html, json, xml, thubnail.png) that enable you to read content from anywhere and how you want it, essentially allowing the whole content repository to act as an API source, and you can read different bits of different content is many ways depending on your need.</p>

<p>AEM has a number of content experiences Content Fragments and Models, Experience Fragments, Tags and Sling API that allow you to get content from AEM. Additionally, ACS has several services that further complement OOTB functionality.</p>

<h3 id="aggregation-api">Aggregation API</h3>

<p>When it comes to the traditional API approach, the aim it funnels all of the calls into one area, one ‚Äúservice‚Äù that handles a request for that content. You typically should have an API gateway to ensure you do not flood your backend service and you would have a number API returning either atomic data or aggregated set of data.</p>

<p><img src="/assets/diagrams/04-aem-spa-api-client-side-aggregation.png" alt="Aggregation Headless Client Side" /></p>

<p>Aggregation of API‚Äôs is a pattern for gathering data from different API‚Äôs and presenting it in one package to the consumer. This pattern can be implemented both on the client and server-side. GraphQL essentially provides a server-side and client-side aggregation in one; you can get atomic data and aggregate as well with one API.</p>

<p><img src="/assets/diagrams/05-aem-spa-api-server-side-aggregation.png" alt="Aggregation Headless Server Side" /></p>

<p>GraphQL API approach allows you to get the same data as traditional API but potentially at the client-side. This obviously has a lot of perceived flexibility as the structure of API is moved up the stack and managed by the UI layer, and the same methods should be used to protect the backend.</p>

<h3 id="headless-aem">Headless AEM</h3>

<p>Headless is a method of using AEM as a source of data, and the primary way of achieving this is by using API and GraphQL for getting data out of AEM. This pattern can be used in any SPA and Widget approach but does make AEM more developer-focused.</p>

<p><img src="/assets/diagrams/06-aem-spa-headless.png" alt="Headless" /></p>

<h4 id="widgets-in-aem">Widgets in AEM</h4>

<p>Widgets are a way of creating AEM authoring components that have rich client-side presentations. This pattern allows full authoring experiences and all of the API patterns to be used.</p>

<p><img src="/assets/diagrams/02-aem-spa-api-widgets.png" alt="Widgets" /></p>

<h3 id="thank-you">Thank you</h3>

<p>Please checkout the docker hub <a href="https://hub.docker.com/r/aemdesign/aem">aemdesign/aem</a> for latest AEM SDK images.</p>

<p>If you would like to contribute or fork the code, you can get it on GitHub <a href="https://github.com/aem-design">https://github.com/aem-design</a> and through Maven central.</p>

<p>Don‚Äôt forget to tell your friends.</p>]]></content><author><name>Max Barrass</name><email>max@aem.design</email><uri>https://maxbarrass.com</uri></author><category term="blog" /><category term="aem" /><category term="spa" /><category term="headless" /><category term="widgets" /><category term="knowledge" /><category term="patterns" /><summary type="html"><![CDATA[When to use these and what they achieve?]]></summary></entry><entry><title type="html">AEM Akamai Cache flush Agent üòç</title><link href="https://aem.design/blog/2021/04/25/creating-akamai-flush-agent" rel="alternate" type="text/html" title="AEM Akamai Cache flush Agent üòç" /><published>2021-04-25T00:00:00+10:00</published><updated>2021-09-21T16:35:10+10:00</updated><id>https://aem.design/blog/2021/04/25/creating-akamai-flush-agent</id><content type="html" xml:base="https://aem.design/blog/2021/04/25/creating-akamai-flush-agent"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>After the first hit to the page in aem and HTML response received for first time from publish instance will get cached on Akamai level.</p>

<p>Subsequent request to the same page will be served from the cached content in Akamai rather than hitting dispatcher / publisher.</p>

<p>Anytime did you struggled to get the latest HTML from publisher instead of Akamai cache?</p>

<p><strong><em>Well we did!!!</em></strong></p>

<h2 id="what-we-have-done">What we have done</h2>

<p>We have worked on AEM replication agent for flushing Akamai cache whenever page gets published.</p>

<p>So, after author change a page content and publish it our Akamai cache flush agent configured on publisher environment will pick that page and request to akamai for clearing cache. 
So that user of that page will get the latest content instead of cached old content from Akamai.</p>

<p>It is all automated, we don‚Äôt need to clear the Akamai cache when new product goes live to prod.</p>

<p>We don‚Äôt ask DevOps to clear Akamai cache so customers will see latest page. Lets save their 1-2 min(s) time whenever new product launch.</p>

<h2 id="where-you-can-find-the-code">Where you can find the code</h2>

<p><a href="https://github.com/aem-design/aemdesign-aem-core/tree/master/aemdesign-aem-common/src/main/content/jcr_root/apps/aemdesign/components/replication/akamai">Akamai Cache Flush Agent</a></p>

<p><a href="https://github.com/aem-design/aemdesign-aem-core/blob/master/aemdesign-aem-services/src/main/java/design/aem/transport/AkamaiTransportHandler.java">Akamai Transport Handler</a></p>

<h2 id="what-are-all-details-do-you-need-to-setup-flush-agent">What are all details do you need to setup flush agent</h2>

<ol>
  <li>akamaiDomain</li>
  <li>akamaiBaseUrl</li>
  <li>akamaiPurgeUrlPath</li>
  <li>clientToken</li>
  <li>clientAccessToken</li>
  <li>clientSecret</li>
</ol>

<p>If you think you don‚Äôt know these info‚Äôs or not sure from where you can get it? Ask devOps these information and say I got your back if you provide me these info üòç</p>

<h2 id="how-we-are-managing-the-secrets">How we are managing the secrets</h2>

<p>After getting the above information from you, we are encrypting keys using AEM‚Äôs crypto support and storing it on AEM so you are safe with your secrets.
While we use it for making the POST call from Transport Handler we will decrypt the keys and use it.</p>

<p>Also while making a POST call to Akamai servers we are using HMAC_SHA_256 to protect the data.</p>

<p>Make sure you are configuring the Akamai cache flush agent on each environment separately</p>

<h2 id="how-to-configure-akamai-flush-agent-on-your-aem-author--publish-instance">How to configure Akamai flush agent on your AEM author / publish instance</h2>

<p>By Assuming you have installed aem design code into your local AEM.</p>

<h2 id="when-to-setup-on-author-and-when-to-setup-on-publish">When to setup on author and when to setup on publish</h2>

<p>Setup Akamai flush agent on AEM author instance only if you have akamai setup on author level as well. Mostly we will have Akamai setup for publish env.</p>

<p>Always setup Akamai flush agent on publish level so as soon as the page reaches publish instance our Akamai flush agent will go ahead and clear Akamai Cache.</p>

<h2 id="how-to-setup-akamai-flush-agent">How to setup Akamai flush agent</h2>

<p>Go to <a href="http://localhost:4502/miscadmin">miscadmin</a> and open replication/agents.author for author instance &amp; replication/agents.publish for publish instance</p>

<p>here I‚Äôm showing example of setting flush agent in author level same time you can set it in publisher as well.</p>

<p><img src="/assets/images/akamai-flush-agent/akamai-replication-miscadmin.png" alt="miscadmin" /></p>

<p>Click new from tool bar and you will see the Create Page dialog.</p>

<p><img src="/assets/images/akamai-flush-agent/akamai-create-agent.png" alt="create new agent" /></p>

<p>Select ‚ÄúAkamai Publishing Replication‚Äù and give your replication agent a name &amp; title.
Click on create and open the newly created agent on the list. (it will be the last entry on the list)
Click on Edit and provide the information required and click on Ok.</p>

<p><img src="/assets/images/akamai-flush-agent/akamai-settings-tab.png" alt="settings tab" /></p>

<p><img src="/assets/images/akamai-flush-agent/akamai-config-tab.png" alt="config_tab" /></p>

<p>You should be able to see the Akamai Flush Agent is On (green) and it will look for any replication events.</p>

<p><img src="/assets/images/akamai-flush-agent/akamai-enabled-agent.png" alt="success" /></p>

<p>Click on Test Connection link and make sure you have all the correct configurations.
You should see ‚ÄúReplication test succeeded‚Äù</p>

<h2 id="conclusion">Conclusion</h2>

<p>This component will save our time whenever we need to update the content in AEM pages.</p>

<p>Make sure you have set up the dispatcher flush agent as well so we can avoid content served from Dispatcher cache.</p>

<p>Feel free to reach out to us if you have any questions and don‚Äôt forget to tell your friends.</p>

<h3 id="thank-you">Thank you</h3>]]></content><author><name>Seenivasa Ragavan Soundar Rajan</name><email>mailtoragavan.be@gmail.com</email></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="akamai" /><category term="knowledge" /><category term="sharing" /><summary type="html"><![CDATA[Why should we bother DevOps to clear Akamai Cache when you can do it yourself using flush agent]]></summary></entry><entry><title type="html">AEM SDK and JDK11</title><link href="https://aem.design/blog/2021/03/16/aem-sdk-jdk11" rel="alternate" type="text/html" title="AEM SDK and JDK11" /><published>2021-03-16T23:37:00+11:00</published><updated>2021-12-22T10:23:36+11:00</updated><id>https://aem.design/blog/2021/03/16/aem-sdk-jdk11</id><content type="html" xml:base="https://aem.design/blog/2021/03/16/aem-sdk-jdk11"><![CDATA[<p>Building on the previous work <a href="/blog/2019/07/01/docker-containers-everywhere">Docker Containers Everywhere</a>, <a href="/blog/2019/09/04/aem-and-dockerüòçüòò">AEM and Docker üòçüòò</a> and <a href="/blog/2019/08/30/docker-aem-bundle">Docker AEM Bundle</a> its time to bring AEM SDK and JDK11 into life!</p>

<p>If you take a look <a href="https://hub.docker.com/r/aemdesign/aem">docker hub</a> and <a href="https://github.com/aem-design/docker-aem">docker-aem</a> branches you will find a couple of new additions that you will find helpful.</p>

<p>JDK11 version of AEM 6.5 and AEM SDK version is now ready for use!</p>

<h3 id="running-aem-jdk-11-in-docker">Running AEM JDK 11 in Docker</h3>

<p>To start author AEM 6.5 with SP10 on JDK11 run the following:</p>

<div class="code-copy-header">
  <button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span><span class="w"> </span><span class="nx">run</span><span class="w"> </span><span class="nt">--name</span><span class="w"> </span><span class="nx">author655</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"TZ=Australia/Sydney"</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"AEM_RUNMODE=-Dsling.run.modes=author,crx3,crx3tar,forms,localdev"</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"AEM_JVM_OPTS=-server -Xms248m -Xmx1524m -XX:MaxDirectMemorySize=256M -XX:+CMSClassUnloadingEnabled -Djava.awt.headless=true -Dorg.apache.felix.http.host=0.0.0.0 -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=58242,suspend=n -XX:+UseParallelGC --add-opens=java.desktop/com.sun.imageio.plugins.jpeg=ALL-UNNAMED --add-opens=java.base/sun.net.www.protocol.jrt=ALL-UNNAMED --add-opens=java.naming/javax.naming.spi=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xerces.internal.dom=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED -Dnashorn.args=--no-deprecation-warning"</span><span class="w"> </span><span class="nt">-p4502</span><span class="p">:</span><span class="nx">8080</span><span class="w"> </span><span class="nt">-p30303</span><span class="p">:</span><span class="nx">58242</span><span class="w"> </span><span class="nt">-d</span><span class="w"> </span><span class="nx">aemdesign/aem:6.5.10.0-jdk11</span><span class="w">
</span></code></pre></div></div>

<p>To start author AEM SDK version 2021.10.5958 run the following:</p>

<div class="code-copy-header">
  <button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span><span class="w"> </span><span class="nx">run</span><span class="w"> </span><span class="nt">--name</span><span class="w"> </span><span class="nx">authorsdk2021105958</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"TZ=Australia/Sydney"</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"AEM_RUNMODE=-Dsling.run.modes=author,crx3,crx3tar,forms,localdev"</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="s2">"AEM_JVM_OPTS=-server -Xms248m -Xmx1524m -XX:MaxDirectMemorySize=256M -XX:+CMSClassUnloadingEnabled -Djava.awt.headless=true -Dorg.apache.felix.http.host=0.0.0.0 -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=58242,suspend=n -XX:+UseParallelGC --add-opens=java.desktop/com.sun.imageio.plugins.jpeg=ALL-UNNAMED --add-opens=java.base/sun.net.www.protocol.jrt=ALL-UNNAMED --add-opens=java.naming/javax.naming.spi=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xerces.internal.dom=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED -Dnashorn.args=--no-deprecation-warning"</span><span class="w"> </span><span class="nt">-p4502</span><span class="p">:</span><span class="nx">8080</span><span class="w"> </span><span class="nt">-p30303</span><span class="p">:</span><span class="nx">58242</span><span class="w"> </span><span class="nt">-d</span><span class="w"> </span><span class="nx">aemdesign/aem:sdk-2021.10.5958</span><span class="w">
</span></code></pre></div></div>

<p>To make all this possible following Docker image chain has been updated:</p>

<ul>
  <li><a href="https://github.com/aem-design/docker-aem/tree/jdk11">aemdesign/aem:jdk11</a> - AEM Quickstart content
    <ul>
      <li><a href="https://github.com/aem-design/docker-aem-base/tree/jdk11">aemdesign/aem-base:jdk11</a> - AEM linux dependencies
        <ul>
          <li><a href="https://github.com/aem-design/docker-java-ffmpeg/tree/jdk11">aemdesign/java-ffmpeg:jdk11</a> - provides ImageMagic and FFMpeg libraries
            <ul>
              <li><a href="https://github.com/aem-design/docker-oracle-jdk/tree/jdk11">aemdesign/oracle-jdk:jdk11</a> - provides a an oracle jdk
                <ul>
                  <li><a href="https://github.com/aem-design/docker-centos-tini/tree/centos8">aemdesign/centos-tini:centos8</a> - provides a base for all java apps</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>In addition to these pipelines have been updated to allow Docker Image squash experimental option to ensure all images have the smallest amount of layers.</p>

<p>Additionally, centos build pack has been updated to JDK 11 and Centos 8 with all the swiss army knife tools one expects.</p>

<ul>
  <li><a href="https://github.com/aem-design/docker-centos-java-buildpack/tree/jdk11">aemdesign/centos-java-buildpack:jdk11</a></li>
</ul>

<h3 id="thank-you">Thank you</h3>

<p>Please checkout the docker hub <a href="https://hub.docker.com/r/aemdesign/aem">aemdesign/aem</a> for further details.</p>

<p>If you would like to contribute or fork the code, you can get it on GitHub <a href="https://github.com/aem-design">https://github.com/aem-design</a>.</p>

<p>Don‚Äôt forget to tell your friends.</p>]]></content><author><name>Max Barrass</name><email>max@aem.design</email><uri>https://maxbarrass.com</uri></author><category term="blog" /><category term="devops" /><category term="aem" /><category term="docker" /><summary type="html"><![CDATA[Building on the previous work Docker Containers Everywhere, AEM and Docker üòçüòò and Docker AEM Bundle its time to bring AEM SDK and JDK11 into life!]]></summary></entry></feed>